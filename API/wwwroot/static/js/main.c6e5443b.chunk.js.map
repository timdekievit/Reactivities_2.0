{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilters.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/common/form/MyTextInput.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/Homepage.tsx","app/layout/LoadingComponent.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectInput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/form/ActivityForm.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedHeader.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestErrors.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhtoWidgetCropper.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","toast","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadPhoto","file","formData","FormData","append","setMainPhoto","deletePhoto","updateProfile","profile","updateFollowing","listFollowings","predicate","listActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activitiesRegistry","Map","selectedActivity","editMode","loading","loadingInititial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","axiosParams","result","setActivity","setPagination","setLoadingInitial","console","log","loadActivity","getActivity","runInAction","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","loadingProfile","uploading","followings","loadingFollowings","activeTab","userActivities","loadingActivities","setActiveTab","loadProfile","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","creds","setToken","modalStore","closeModal","logout","window","localStorage","removeItem","getUser","getItem","appLoaded","setAppLoaded","setItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","vertical","size","widht","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","width","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","MyTextInput","props","useField","field","meta","Form","Field","touched","label","initialValues","email","password","onSubmit","setErrors","handleSubmit","isSubmitting","className","autoComplete","placeholder","type","render","ValidationErrors","Message","err","i","validationSchema","Yup","required","isValid","dirty","isLoggedIn","LoadingComponent","Dimmer","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","categoryOptions","MyDateInput","selected","useHistory","useParams","nullable","enableReinitialize","uuid","handleFormSubmit","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","positions","zIndex","top","ribbon","verticalAlign","length","relaxed","divided","Extra","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","preview","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"wZAOaA,EAIT,WAAYC,EAASC,GAAyB,yBAH9CD,UAG6C,OAF7CC,gBAE6C,EACzCC,KAAKF,KAAOA,EACZE,KAAKD,WAAaA,GAIbE,EAIT,aAA2C,IAA/BC,EAA8B,uDAAjB,EAAGC,EAAc,uDAAH,EAAG,yBAH1CD,gBAG0C,OAF1CC,cAE0C,EACtCH,KAAKE,WAAaA,EAClBF,KAAKG,SAAWA,GCRxBC,IAAMC,SAASC,QAAUC,OAEzBH,IAAMI,aAAaC,QAAQC,KAAI,SAAAC,GAC3B,IAAMC,EAAQC,EAAMC,YAAYF,MAEhC,OADIA,IAAOD,EAAOI,QAAQC,cAAf,iBAAyCJ,IAC7CD,KAGXP,IAAMI,aAAaS,SAASP,IAA5B,+BAAAQ,EAAA,MAAgC,WAAMD,GAAN,eAAAC,EAAA,iFAEtBnB,EAAakB,EAASF,QAAT,YAFS,uBAIxBE,EAASnB,KAAO,IAAID,EAAgBoB,EAASnB,KAAMqB,KAAKC,MAAMrB,IAJtC,kBAKjBkB,GALiB,gCAOrBA,GAPqB,2CAAhC,uDAQG,SAACI,GACA,MAAiCA,EAAMJ,SAA/BnB,EAAR,EAAQA,KAAMwB,EAAd,EAAcA,OAAQX,EAAtB,EAAsBA,OACtB,OAAQW,GACJ,KAAK,IAID,GAHsB,QAAlBX,EAAOY,QAAoBzB,EAAK0B,OAAOC,eAAe,OACtDC,GAAQC,KAAK,cAEb7B,EAAK0B,OAAQ,CACb,IAAMI,EAAmB,GACzB,IAAK,IAAMC,KAAO/B,EAAK0B,OACf1B,EAAK0B,OAAOK,IACZD,EAAiBD,KAAK7B,EAAK0B,OAAOK,IAG1C,MAAMD,EAAiBE,OAEvBC,IAAMV,MAAMvB,GAEhB,MACJ,KAAK,IACDiC,IAAMV,MAAM,gBACZ,MACJ,KAAK,IACDK,GAAQC,KAAK,cACb,MACJ,KAAK,IACDd,EAAMC,YAAYkB,eAAelC,GACjC4B,GAAQC,KAAK,iBAGrB,OAAOM,QAAQC,OAAOb,MAG1B,IAAMc,EAAe,SAAIlB,GAAJ,OAAmCA,EAASnB,MAE3DsC,EACG,SAAIC,GAAJ,OAAoBjC,IAAMkC,IAAOD,GAAKE,KAAKJ,IAD9CC,EAEI,SAAIC,EAAaG,GAAjB,OAA8BpC,IAAMqC,KAAQJ,EAAKG,GAAMD,KAAKJ,IAFhEC,EAGG,SAAIC,EAAaG,GAAjB,OAA8BpC,IAAMsC,IAAOL,EAAKG,GAAMD,KAAKJ,IAH9DC,EAIG,SAAIC,GAAJ,OAAoBjC,IAAMuC,OAAUN,GAAKE,KAAKJ,IA4CxCS,EAND,CACVC,WApCe,CACfC,KAAM,SAACC,GAAD,OAA6B3C,IAAMkC,IAAiC,cAAe,CAAES,WACtFR,KAAKJ,IACVa,QAAS,SAACC,GAAD,OAAgBb,EAAA,sBAAsCa,KAC/DC,OAAQ,SAACC,GAAD,OAAkCf,EAAoB,cAAee,IAC7EC,OAAQ,SAACD,GAAD,OAAkCf,EAAA,sBAAkCe,EAASF,IAAME,IAC3FR,OAAQ,SAACM,GAAD,OAAgBb,EAAA,sBAAkCa,KAC1DI,OAAQ,SAACJ,GAAD,OAAgBb,EAAA,sBAAmCa,EAAnC,WAAgD,MA8BxEK,QA3BY,CACZC,QAAS,kBAAMnB,EAAmB,aAClCoB,MAAO,SAACC,GAAD,OAA0BrB,EAAoB,iBAAkBqB,IACvEC,SAAU,SAACD,GAAD,OAA0BrB,EAAoB,oBAAqBqB,KAyB7EE,SAtBa,CACbrB,IAAK,SAACsB,GAAD,OAAsBxB,EAAA,oBAAmCwB,KAC9DC,YAAa,SAACC,GACV,IAAIC,EAAW,IAAIC,SAEnB,OADAD,EAASE,OAAO,OAAQH,GACjB1D,IAAMqC,KAAY,SAAUsB,EAAU,CACzChD,QAAS,CAAE,eAAgB,0BAGnCmD,aAAc,SAACjB,GAAD,OAAgBb,EAAA,kBAAyBa,EAAzB,YAAuC,KACrEkB,YAAa,SAAClB,GAAD,OAAgBb,EAAA,kBAAwBa,KACrDmB,cAAe,SAACC,GAAD,OAA+BjC,EAAA,YAA0BiC,IACxEC,gBAAiB,SAACV,GAAD,OAAsBxB,EAAA,kBAAyBwB,GAAY,KAC5EW,eAAgB,SAACX,EAAkBY,GAAnB,OACZpC,EAAA,kBAAmCwB,EAAnC,sBAAyDY,KAC7DC,eAAgB,SAACb,EAAkBY,GAAnB,OACZpC,EAAA,oBAA0CwB,EAA1C,iCAA2EY,OCvFtEE,EACT,WAAYC,GAA4B,oBACpCC,OAAOC,OAAO7E,KAAM2E,IAIfG,EAST,WAAY3B,GAAgC,yBAR5CF,QAAc8B,EAQ6B,KAP3CC,MAAgB,GAO2B,KAN3CC,SAAmB,GAMwB,KAL3CC,YAAsB,GAKqB,KAJ3CC,KAAoB,KAIuB,KAH3CC,KAAe,GAG4B,KAF3CC,MAAgB,GAGRlC,IACAnD,KAAKiD,GAAKE,EAASF,GACnBjD,KAAKgF,MAAQ7B,EAAS6B,MACtBhF,KAAKiF,SAAW9B,EAAS8B,SACzBjF,KAAKkF,YAAc/B,EAAS+B,YAC5BlF,KAAKmF,KAAOhC,EAASgC,KACrBnF,KAAKoF,KAAOjC,EAASiC,KACrBpF,KAAKqF,MAAQlC,EAASkC,QC5BrBC,EACT,WAAY7B,GAAa,oBACrBzD,KAAK4D,SAAWH,EAAKG,SACrB5D,KAAKuF,YAAc9B,EAAK8B,YACxBvF,KAAKwF,MAAQ/B,EAAK+B,OCTLC,E,WAUjB,aAAe,IAAD,gCATdC,mBAAqB,IAAIC,IASX,KARdC,sBAAyCb,EAQ3B,KAPdc,UAAW,EAOG,KANdC,SAAU,EAMI,KALdC,kBAAmB,EAKL,KAJdhG,WAAgC,KAIlB,KAHdiG,aAAe,IAAI/F,EAGL,KAFduE,WAAY,IAAImB,KAAMM,IAAI,OAAO,GAEnB,KAadC,gBAAkB,SAACF,GACf,EAAKA,aAAeA,GAdV,KAiBdG,aAAe,SAAC3B,EAAmB4B,GAC/B,IAAMC,EAAiB,WACnB,EAAK7B,UAAU8B,SAAQ,SAACF,EAAOvE,GACf,cAARA,GAAqB,EAAK2C,UAAU7B,OAAOd,OAGvD,OAAQ2C,GACJ,IAAK,MACD6B,IACA,EAAK7B,UAAUyB,IAAI,OAAO,GAC1B,MACJ,IAAK,UACDI,IACA,EAAK7B,UAAUyB,IAAI,WAAW,GAC9B,MACJ,IAAK,SACDI,IACA,EAAK7B,UAAUyB,IAAI,UAAU,GAC7B,MACJ,IAAK,YACD,EAAKzB,UAAU7B,OAAO,aACtB,EAAK6B,UAAUyB,IAAI,YAAaG,KAtC9B,KAwEdG,eAxEc,sBAwEG,4BAAArF,EAAA,6DACb,EAAK6E,kBAAmB,EADX,kBAGYnD,EAAMC,WAAWC,KAAK,EAAK0D,aAHvC,QAGHC,EAHG,QAIF3G,KAAKwG,SAAQ,SAAAnD,GAChB,EAAKuD,YAAYvD,MAErB,EAAKwD,cAAcF,EAAO1G,YAC1B,EAAK6G,mBAAkB,GARd,kDAUTC,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAXd,0DAxEH,KAuFdD,cAAgB,SAAC5G,GACb,EAAKA,WAAaA,GAxFR,KA2FdgH,aA3Fc,uCA2FC,WAAO9D,GAAP,eAAA/B,EAAA,2DACPiC,EAAW,EAAK6D,YAAY/D,IADrB,uBAGP,EAAK2C,iBAAmBzC,EAHjB,kBAIAA,GAJA,cAMP,EAAK4C,kBAAmB,EANjB,mBAQcnD,EAAMC,WAAWG,QAAQC,GARvC,eAQHE,EARG,OASH,EAAKuD,YAAYvD,GACjB8D,aAAY,WACR,EAAKrB,iBAAmBzC,KAE5B,EAAKyD,mBAAkB,GAbpB,kBAcIzD,GAdJ,kCAgBH0D,QAAQC,IAAR,MACA,EAAKF,mBAAkB,GAjBpB,0DA3FD,2DAiHNF,YAAc,SAACvD,GACnB,IACU,EADJM,EAAO5C,EAAMqG,UAAUzD,KACzBA,IACAN,EAASgE,QAAUhE,EAASiE,UAAWC,MACnC,SAAAnG,GAAC,OAAIA,EAAE0C,WAAaH,EAAKG,YAE7BT,EAASmE,OAASnE,EAASoE,eAAiB9D,EAAKG,SACjDT,EAASqE,KAAT,UAAgBrE,EAASiE,iBAAzB,aAAgB,EAAoBK,MAAK,SAAAC,GAAC,OAAIA,EAAE9D,WAAaT,EAASoE,iBAE1EpE,EAASgC,KAAO,IAAIwC,KAAKxE,EAASgC,MAClC,EAAKO,mBAAmBO,IAAI9C,EAASF,GAAIE,IA3H/B,KA8HN6D,YAAc,SAAC/D,GACnB,OAAO,EAAKyC,mBAAmBpD,IAAIW,IA/HzB,KAkId2D,kBAAoB,SAACgB,GACjB,EAAK7B,iBAAmB6B,GAnId,KAsIdC,eAtIc,uCAsIG,WAAO1E,GAAP,mBAAAjC,EAAA,6DACPuC,EAAO5C,EAAMqG,UAAUzD,KACvBqE,EAAW,IAAIxC,EAAQ7B,GAFhB,kBAIHb,EAAMC,WAAWK,OAAOC,GAJrB,QAKH4E,EAAc,IAAIrD,EAASvB,IACrBoE,aAAe9D,EAAMG,SACjCmE,EAAYX,UAAY,CAACU,GACzB,EAAKpB,YAAYqB,GACjBd,aAAY,WACR,EAAKrB,iBAAmBmC,KAVnB,kDAaTlB,QAAQC,IAAR,MAbS,0DAtIH,2DAuJdkB,eAvJc,uCAuJG,WAAO7E,GAAP,SAAAjC,EAAA,6DACb,EAAK4E,SAAU,EADF,kBAGHlD,EAAMC,WAAWO,OAAOD,GAHrB,OAIT8D,aAAY,WACR,GAAI9D,EAASF,GAAI,CACb,IAAIgF,EAAe,2BAAQ,EAAKjB,YAAY7D,EAASF,KAAQE,GAC7D,EAAKuC,mBAAmBO,IAAI9C,EAASF,GAAIgF,GACzC,EAAKrC,iBAAmBqC,MARvB,gDAYTpB,QAAQC,IAAR,MAZS,yDAvJH,2DAuKdoB,eAvKc,uCAuKG,WAAOjF,GAAP,SAAA/B,EAAA,6DACb,EAAK4E,SAAU,EADF,kBAGHlD,EAAMC,WAAWF,OAAOM,GAHrB,OAITgE,aAAY,WACR,EAAKvB,mBAAmB/C,OAAOM,GAC/B,EAAK6C,SAAU,KANV,gDASTe,QAAQC,IAAR,MACAG,aAAY,WACR,EAAKnB,SAAU,KAXV,yDAvKH,2DAuLdqC,iBAvLc,sBAuLK,4BAAAjH,EAAA,6DACTuC,EAAO5C,EAAMqG,UAAUzD,KAC7B,EAAKqC,SAAU,EAFA,kBAILlD,EAAMC,WAAWQ,OAAO,EAAKuC,iBAAkB3C,IAJ1C,OAKXgE,aAAY,WAAO,IAAD,EACd,aAAI,EAAKrB,wBAAT,aAAI,EAAuBuB,QAAS,CAAC,IAAD,EAChC,EAAKvB,iBAAiBwB,UAAtB,UACI,EAAKxB,iBAAiBwB,iBAD1B,aACI,EAAiCgB,QAAO,SAAAlH,GAAC,OAAIA,EAAE0C,YAAF,OAAeH,QAAf,IAAeA,OAAf,EAAeA,EAAMG,aACtE,EAAKgC,iBAAiBuB,SAAU,MAC7B,CAAC,IAAD,IACGW,EAAW,IAAIxC,EAAQ7B,GAC7B,YAAKmC,wBAAL,mBAAuBwB,iBAAvB,SAAkCzF,KAAKmG,GACvC,EAAKlC,iBAAkBuB,SAAU,EAErC,EAAKzB,mBAAmBO,IAAI,EAAKL,iBAAkB3C,GAAI,EAAK2C,qBAfrD,gDAkBXiB,QAAQC,IAAR,MAlBW,yBAoBXG,aAAY,kBAAM,EAAKnB,SAAU,KApBtB,4EAvLL,KA+MduC,qBA/Mc,sBA+MS,sBAAAnH,EAAA,6DACnB,EAAK4E,SAAU,EADI,kBAGTlD,EAAMC,WAAWQ,OAAO,EAAKuC,iBAAkB3C,IAHtC,OAIfgE,aAAY,WAAO,IAAD,EACd,EAAKrB,iBAAkB0C,cAAc,UAAC,EAAK1C,wBAAN,aAAC,EAAuB0C,aAC7D,EAAK5C,mBAAmBO,IAAI,EAAKL,iBAAkB3C,GAAI,EAAK2C,qBANjD,gDASfiB,QAAQC,IAAR,MATe,yBAWfG,aAAY,kBAAM,EAAKnB,SAAU,KAXlB,4EA/MT,KA8NdyC,sBAAwB,WACpB,EAAK3C,sBAAmBb,GA/Nd,KAkOdyD,wBAA0B,SAAC5E,GACvB,EAAK8B,mBAAmBY,SAAQ,SAAAnD,GAC5BA,EAASiE,UAAUd,SAAQ,SAAAwB,GACnBA,EAASlE,WAAaA,IACtBkE,EAASW,UAAYX,EAASY,iBAAmBZ,EAASY,iBAC1DZ,EAASW,WAAaX,EAASW,kBAtO3CE,YAAmB3I,MAEnB4I,aACI,kBAAM,EAAKpE,UAAUqE,UACrB,WACI,EAAK7C,aAAe,IAAI/F,EACxB,EAAKyF,mBAAmBoD,QACxB,EAAKvC,oB,6CAmCjB,WACI,IAAMxD,EAAS,IAAIgG,gBAUnB,OATAhG,EAAOkB,OAAO,aAAcjE,KAAKgG,aAAa9F,WAAW8I,YACzDjG,EAAOkB,OAAO,WAAYjE,KAAKgG,aAAa7F,SAAS6I,YACrDhJ,KAAKwE,UAAU8B,SAAQ,SAACF,EAAOvE,GACf,cAARA,EACAkB,EAAOkB,OAAOpC,EAAMuE,EAAe6C,eAEnClG,EAAOkB,OAAOpC,EAAKuE,MAGpBrD,I,4BAGX,WACI,OAAOmG,MAAMC,KAAKnJ,KAAK0F,mBAAmB0D,UAAUC,MAAK,SAACnI,EAAGoI,GAAJ,OACrDpI,EAAEiE,KAAMoE,UAAYD,EAAEnE,KAAMoE,e,6BAGpC,WACI,OAAO3E,OAAO4E,QACVxJ,KAAKyJ,iBAAiBC,QAAO,SAACC,EAAYxG,GACtC,IAAMgC,EAAOyE,kBAAOzG,EAASgC,KAAO,eAEpC,OADAwE,EAAWxE,GAAQwE,EAAWxE,GAAX,sBAAuBwE,EAAWxE,IAAlC,CAAyChC,IAAY,CAACA,GAClEwG,IACR,S,cCjFME,E,WAWjB,aAAe,IAAD,gCAVdxF,QAA0B,KAUZ,KATdyF,gBAAiB,EASH,KARdC,WAAY,EAQE,KAPdjE,SAAU,EAOI,KANdkE,WAAwB,GAMV,KALdC,mBAAoB,EAKN,KAJdC,UAAY,EAIE,KAHdC,eAAiC,GAGnB,KAFdC,mBAAoB,EAEN,KAgBdC,aAAe,SAACH,GACZ,EAAKA,UAAYA,GAjBP,KA2BdI,YA3Bc,uCA2BA,WAAO1G,GAAP,eAAA1C,EAAA,6DACV,EAAK4I,gBAAiB,EADZ,kBAGgBlH,EAAMe,SAASrB,IAAIsB,GAHnC,OAGAS,EAHA,OAIN4C,aAAY,WACR,EAAK5C,QAAUA,EACf,EAAKyF,gBAAiB,KANpB,gDASNjD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK6C,gBAAiB,KAVlC,yDA3BA,2DAyCdjG,YAzCc,uCAyCA,WAAOC,GAAP,iBAAA5C,EAAA,6DACV,EAAK6I,WAAY,EADP,kBAGiBnH,EAAMe,SAASE,YAAYC,GAH5C,OAGA7C,EAHA,OAIAsJ,EAAQtJ,EAASnB,KACvBmH,aAAY,WACW,IAAD,EAAd,EAAK5C,UACL,YAAKA,QAAQmG,cAAb,SAAqB7I,KAAK4I,GACtBA,EAAME,QAAU5J,EAAMqG,UAAUzD,OAChC5C,EAAMqG,UAAUwD,SAASH,EAAMlI,KAC/B,EAAKgC,QAAQmB,MAAQ+E,EAAMlI,MAGnC,EAAK0H,WAAY,KAbf,gDAgBNlD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAK8C,WAAY,KAjB7B,yDAzCA,2DA8Dd7F,aA9Dc,uCA8DC,WAAOqG,GAAP,SAAArJ,EAAA,6DACX,EAAK4E,SAAU,EADJ,kBAGDlD,EAAMe,SAASO,aAAaqG,EAAMtH,IAHjC,OAIPpC,EAAMqG,UAAUwD,SAASH,EAAMlI,KAC/B4E,aAAY,WACJ,EAAK5C,SAAW,EAAKA,QAAQmG,SAC7B,EAAKnG,QAAQmG,OAAO/C,MAAK,SAAAkD,GAAC,OAAIA,EAAEF,UAASA,QAAS,EAClD,EAAKpG,QAAQmG,OAAO/C,MAAK,SAAAkD,GAAC,OAAIA,EAAE1H,KAAOsH,EAAMtH,MAAKwH,QAAS,EAC3D,EAAKpG,QAAQmB,MAAQ+E,EAAMlI,IAC3B,EAAKyD,SAAU,MAVhB,gDAcPe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAf1B,yDA9DD,2DAiFd3B,YAjFc,uCAiFA,WAAOoG,GAAP,SAAArJ,EAAA,6DACV,EAAK4E,SAAU,EADL,kBAGAlD,EAAMe,SAASQ,YAAYoG,EAAMtH,IAHjC,OAKNgE,aAAY,WACW,IAAD,EAAd,EAAK5C,UACL,EAAKA,QAAQmG,OAAb,UAAsB,EAAKnG,QAAQmG,cAAnC,aAAsB,EAAqBpC,QAAO,SAAAuC,GAAC,OAAIA,EAAE1H,KAAOsH,EAAMtH,MACtE,EAAK6C,SAAU,MARjB,gDAYNe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAb3B,yDAjFA,2DAkGdxB,gBAlGc,uCAkGI,WAAOV,EAAkB6E,GAAzB,SAAAvH,EAAA,6DACd,EAAK4E,SAAU,EADD,kBAGJlD,EAAMe,SAASW,gBAAgBV,GAH3B,OAIV/C,EAAM+J,cAAcpC,wBAAwB5E,GAC5CqD,aAAY,WAAO,IAAD,IACV,EAAK5C,SAAW,EAAKA,QAAQT,YAAb,UAA0B/C,EAAMqG,UAAUzD,YAA1C,aAA0B,EAAsBG,WAAY,EAAKS,QAAQT,WAAaA,IACtG6E,EAAY,EAAKpE,QAAQqE,iBAAmB,EAAKrE,QAAQqE,iBACzD,EAAKrE,QAAQoE,WAAa,EAAKpE,QAAQoE,WAEvC,EAAKpE,SAAW,EAAKA,QAAQT,YAAb,UAA0B/C,EAAMqG,UAAUzD,YAA1C,aAA0B,EAAsBG,YAChE6E,EAAY,EAAKpE,QAAQwG,iBAAmB,EAAKxG,QAAQwG,kBAE7D,EAAKb,WAAW1D,SAAQ,SAAAjC,GAChBA,EAAQT,WAAaA,IACrBS,EAAQoE,UAAYpE,EAAQqE,iBAAmBrE,EAAQqE,iBACvDrE,EAAQoE,WAAapE,EAAQoE,cAGrC,EAAK3C,SAAU,KAnBT,gDAuBVe,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKnB,SAAU,KAxBvB,yDAlGJ,6DA8HdgF,eA9Hc,uCA8HG,WAAOtG,GAAP,eAAAtD,EAAA,6DACb,EAAK+I,mBAAoB,EADZ,kBAGgBrH,EAAMe,SAASY,eAAe,EAAKF,QAAST,SAAUY,GAHtE,OAGHwF,EAHG,OAIT/C,aAAY,WACR,EAAK+C,WAAaA,EAClB,EAAKC,mBAAoB,KANpB,gDASTpD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKgD,mBAAoB,KAVlC,yDA9HH,2DA4Idc,mBA5Ic,uCA4IO,WAAOnH,EAAkBY,GAAzB,eAAAtD,EAAA,6DACjB,EAAKkJ,mBAAoB,EADR,kBAGYxH,EAAMe,SAASc,eAAeb,EAAUY,GAHpD,OAGPmF,EAHO,OAIb1C,aAAY,WACR,EAAKkD,eAAiBR,EACtB,EAAKS,mBAAoB,KANhB,gDASbvD,QAAQC,IAAR,MACAG,aAAY,kBAAM,EAAKmD,mBAAoB,KAV9B,yDA5IP,wDACVzB,YAAmB3I,MAEnB4I,aACI,kBAAM,EAAKsB,aACX,SAAAA,GACI,GAAkB,IAAdA,GAAiC,IAAdA,EAAiB,CACpC,IAAM1F,EAA0B,IAAd0F,EAAkB,YAAc,YAClD,EAAKY,eAAetG,QAEpB,EAAKwF,WAAa,M,+CAUlC,WACI,SAAInJ,EAAMqG,UAAUzD,OAAQzD,KAAKqE,UACtBxD,EAAMqG,UAAUzD,KAAKG,WAAa5D,KAAKqE,QAAQT,a,KChC7CoH,E,WAGjB,aAAe,IAAD,gCAFdvH,KAAoB,KAEN,KAQdD,MARc,uCAQN,WAAOyH,GAAP,eAAA/J,EAAA,+EAEmB0B,EAAMU,QAAQE,MAAMyH,GAFvC,OAEMxH,EAFN,OAGA5C,EAAMC,YAAYoK,SAASzH,EAAK7C,OAChCqG,aAAY,kBAAM,EAAKxD,KAAOA,KAC9B/B,GAAQC,KAAK,eACbd,EAAMsK,WAAWC,aANjB,uHARM,2DAoBdC,OAAS,WACLxK,EAAMC,YAAYoK,SAAS,MAC3BI,OAAOC,aAAaC,WAAW,OAC/B,EAAK/H,KAAO,KACZ/B,GAAQC,KAAK,MAxBH,KA2Bd8J,QA3Bc,sBA2BJ,4BAAAvK,EAAA,+EAEiB0B,EAAMU,QAAQC,UAF/B,OAEIE,EAFJ,OAGFwD,aAAY,kBAAM,EAAKxD,KAAOA,KAH5B,gDAKFoD,QAAQC,IAAR,MALE,yDA3BI,KAoCdpD,SApCc,uCAoCH,WAAOuH,GAAP,eAAA/J,EAAA,+EAEgB0B,EAAMU,QAAQI,SAASuH,GAFvC,OAEGxH,EAFH,OAGH5C,EAAMC,YAAYoK,SAASzH,EAAK7C,OAChCqG,aAAY,kBAAM,EAAKxD,KAAOA,KAC9B/B,GAAQC,KAAK,eACbd,EAAMsK,WAAWC,aANd,uHApCG,2DAgDdV,SAAW,SAAClF,GACJ,EAAK/B,OAAM,EAAKA,KAAK+B,MAAQA,IAhDjCmD,YAAmB3I,M,4CAGvB,WACI,QAASA,KAAKyD,S,KCGT5C,EAAe,CACxB+J,cAAe,IAAInF,EACnB3E,YAAa,ICXb,aAAe,IAAD,gCAJdO,MAA4B,KAId,KAHdT,MAAuB0K,OAAOC,aAAaG,QAAQ,OAGrC,KAFdC,WAAY,EAEE,KAed3J,eAAiB,SAACX,GACd,EAAKA,MAAQA,GAhBH,KAmBd6J,SAAW,SAACtK,GACR,EAAKA,MAAQA,GApBH,KAuBdgL,aAAe,WACX,EAAKD,WAAY,GAvBjBhD,YAAmB3I,MAEnB4I,aACI,kBAAM,EAAKhI,SACX,SAAAA,GACQA,EACA0K,OAAOC,aAAaM,QAAQ,MAAOjL,GAEnC0K,OAAOC,aAAaC,WAAW,WDG/CtE,UAAW,IAAI8D,EACfG,WAAY,IERZ,aAAe,IAAD,gCALdW,MAAc,CACVC,MAAM,EACNvJ,KAAM,MAGI,KAIdwJ,UAAY,SAACC,GACT,EAAKH,MAAMC,MAAO,EAClB,EAAKD,MAAMtJ,KAAOyJ,GANR,KASdb,WAAa,WACT,EAAKU,MAAMC,MAAO,EAClB,EAAKD,MAAMtJ,KAAO,MAVlBmG,YAAmB3I,OFQvBkM,aAAc,IAAIrC,EAClBsC,aAAc,IGdf,aAAe,IAAD,gCAHdC,SAA0B,GAGZ,KAFdC,cAAsC,KAExB,KAIdC,oBAAsB,SAACC,GAChB1L,EAAM+J,cAAchF,mBACrB,EAAKyG,eAAgB,IAAIG,KACrBC,QAAQlM,oBAAkDgM,EAAY,CACpEG,mBAAoB,kCAAM7L,EAAMqG,UAAUzD,YAAtB,aAAM,EAAsB7C,SAElD+L,yBACAC,iBAAiBC,IAASC,aAC1BC,QAEJ,EAAKV,cAAcW,QAAQC,OAAM,SAAA5L,GAAK,OAAIwF,QAAQC,IAAI,sCAAuCzF,MAE7F,EAAKgL,cAAca,GAAG,gBAAgB,SAACd,GACpCnF,aAAY,WACTmF,EAAS9F,SAAQ,SAAA6G,GACdA,EAAQC,UAAY,IAAIzF,KAAKwF,EAAQC,UAAY,QAEpD,EAAKhB,SAAWA,QAItB,EAAKC,cAAca,GAAG,kBAAkB,SAACC,GACtClG,aAAY,WACTkG,EAAQC,UAAY,IAAIzF,KAAKwF,EAAQC,WACrC,EAAKhB,SAASiB,QAAQF,WA5BpB,KAkCdG,kBAAoB,WAAO,IAAD,EACvB,YAAKjB,qBAAL,SAAoBkB,OAAON,OAAM,SAAA5L,GAAK,OAAIwF,QAAQC,IAAI,8BAA+BzF,OAnC1E,KAsCdmM,cAAgB,WACb,EAAKpB,SAAW,GAChB,EAAKkB,qBAxCM,KA2CdG,WA3Cc,uCA2CD,WAAOrE,GAAP,iBAAAlI,EAAA,6DACVkI,EAAOmD,WAAP,UAAoB1L,EAAM+J,cAAchF,wBAAxC,aAAoB,EAAsC3C,GADhD,4BAGD,EAAKoJ,qBAHJ,aAGD,EAAoBqB,OAAO,cAAetE,GAHzC,sDAKPvC,QAAQC,IAAR,MALO,wDA3CC,sDACX6B,YAAmB3I,QHgBZ2N,EAAeC,wBAAc/M,GAEnC,SAASgN,IACZ,OAAOC,qBAAWH,G,WIvBPI,eAAS,WAGpB,MAAwCF,IAAhC3G,UAAazD,EAArB,EAAqBA,KAAM4H,EAA3B,EAA2BA,OAC3B,OACI,cAAC2C,EAAA,EAAD,CAAMC,UAAQ,EAACC,MAAM,MAArB,SACI,eAACC,EAAA,EAAD,WACI,eAACH,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,IAAIC,OAAK,EAACC,QAAM,EAA3C,UACI,qBAAKC,IAAI,kBAAkBC,IAAI,OAAOC,MAAO,CAAEC,YAAa,UADhE,kBAIA,cAACb,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,cAAcO,KAAK,eAC9C,cAACd,EAAA,EAAKI,KAAN,CAAWC,GAAIC,IAASC,GAAG,UAAUO,KAAK,WAC1C,cAACd,EAAA,EAAKI,KAAN,UACI,cAACW,EAAA,EAAD,CAAQV,GAAIC,IAASC,GAAG,kBAAkBS,UAAQ,EAAC/C,QAAQ,sBAE/D,eAAC+B,EAAA,EAAKI,KAAN,CAAWa,SAAS,QAApB,UACI,cAACC,EAAA,EAAD,CAAOR,KAAS,OAAJjL,QAAI,IAAJA,OAAA,EAAAA,EAAM+B,QAAS,mBAAoB2J,QAAM,EAACC,OAAO,UAC7D,cAACC,EAAA,EAAD,CAAUC,SAAS,WAAWC,KAAI,OAAE9L,QAAF,IAAEA,OAAF,EAAEA,EAAM8B,YAA1C,SACI,eAAC8J,EAAA,EAASrB,KAAV,WACI,cAACqB,EAAA,EAASjB,KAAV,CAAeC,GAAImB,IAAMjB,GAAE,2BAAe9K,QAAf,IAAeA,OAAf,EAAeA,EAAMG,UAAY2L,KAAK,aAAaE,KAAK,SACnF,cAACJ,EAAA,EAASjB,KAAV,CAAesB,QAASrE,EAAQkE,KAAK,SAASE,KAAK,0B,8DCrBhE1B,eAAS,WACpB,MAAmDF,IAA5CjD,cAAgBpG,EAAvB,EAAuBA,UAAW2B,EAAlC,EAAkCA,aAClC,OACI,qCACI,eAAC6H,EAAA,EAAD,CAAM2B,UAAQ,EAACC,KAAK,QAAQhB,MAAO,CAAEiB,MAAO,OAAQC,UAAW,IAA/D,UACI,cAACC,EAAA,EAAD,CAAQN,KAAK,SAASO,UAAQ,EAACC,MAAM,OAAOhE,QAAQ,YACpD,cAAC+B,EAAA,EAAKI,KAAN,CACInC,QAAQ,iBACRiE,OAAQ1L,EAAU2L,IAAI,OACtBT,QAAS,kBAAMvJ,EAAa,MAAO,WAEvC,cAAC6H,EAAA,EAAKI,KAAN,CACInC,QAAQ,YACRiE,OAAQ1L,EAAU2L,IAAI,WACtBT,QAAS,kBAAMvJ,EAAa,UAAW,WAE3C,cAAC6H,EAAA,EAAKI,KAAN,CACInC,QAAQ,cACRiE,OAAQ1L,EAAU2L,IAAI,UACtBT,QAAS,kBAAMvJ,EAAa,SAAU,cAG9C,cAAC4J,EAAA,EAAD,IACA,cAAC,IAAD,CACIK,SAAU,SAACjL,GAAD,OAAegB,EAAa,YAAahB,IACnDiB,MAAO5B,EAAUlC,IAAI,cAAgB,IAAIqF,a,8ECrB1CoG,gBAAS,YAA2C,IAAD,EAAlB1J,EAAkB,EAAlBA,QAC5C,EAAkCwJ,IAA3B3B,EAAP,EAAOA,aAAchF,EAArB,EAAqBA,UACd5C,EAA4B4H,EAA5B5H,gBAAiBwB,EAAWoG,EAAXpG,QAExB,IAAI,UAAAoB,EAAUzD,YAAV,eAAgBG,YAAaS,EAAQT,SAAU,OAAO,KAO1D,OACI,eAACyM,GAAA,EAAD,CAAQC,SAAS,OAAjB,UACI,cAACD,GAAA,EAAOE,QAAR,CAAgBC,SAAO,EAAC5B,MAAO,CAAE6B,MAAO,QAAxC,SACI,cAAC1B,EAAA,EAAD,CACI2B,OAAK,EACLT,MAAM,OACNhE,QAAS5H,EAAQoE,UAAY,YAAc,oBAGnD,cAAC4H,GAAA,EAAOE,QAAR,CAAgBI,QAAM,EAAC/B,MAAO,CAAE6B,MAAO,QAAvC,SACI,cAAC1B,EAAA,EAAD,CACI2B,OAAK,EACLE,OAAK,EACLX,MAAO5L,EAAQoE,UAAY,MAAQ,QACnCwD,QAAS5H,EAAQoE,UAAY,WAAa,SAC1C3C,QAASA,EACT4J,QAAS,SAACmB,GAAD,OArBzB,SAAsBA,EAAmBjN,GACrCiN,EAAEC,iBACFzM,EAAQoE,UAAYnE,EAAgBV,GAAU,GAASU,EAAgBV,GAAU,GAmBrDmN,CAAaF,EAAGxM,EAAQT,qBC1B7CmK,gBAAU,YAAuC,IAAjB1J,EAAgB,EAAhBA,QAC3C,OACI,eAAC2M,GAAA,EAAD,CAAM3C,GAAImB,IAAMjB,GAAE,oBAAelK,EAAQT,UAAzC,UACI,cAACsL,EAAA,EAAD,CAAOR,IAAKrK,EAAQmB,OAAS,oBAC7B,eAACwL,GAAA,EAAKT,QAAN,WACI,cAACS,GAAA,EAAKjB,OAAN,UAAc1L,EAAQkB,cACtB,cAACyL,GAAA,EAAKC,YAAN,+BAEJ,eAACD,GAAA,EAAKT,QAAN,CAAcW,OAAK,EAAnB,UACI,cAACC,GAAA,EAAD,CAAMrC,KAAK,SACVzK,EAAQqE,eAFb,gBAIA,cAAC,GAAD,CAAcrE,QAASA,UCZpB0J,gBAAS,YAAyD,IAArB3G,EAAoB,EAApBA,UAClDgK,EAAS,CACXC,YAAa,SACbC,YAAa,GAGjB,OACI,cAACC,GAAA,EAAD,CAAMC,YAAU,EAAhB,SACKpK,EAAUqK,KAAI,SAAA3J,GAAQ,OACnB,cAAC4J,GAAA,EAAD,CACIC,WAAS,EAETC,QACI,cAACL,GAAA,EAAKnD,KAAN,CAAmCC,GAAImB,IAAMjB,GAAE,oBAAezG,EAASlE,UAAvE,SACI,cAACsL,EAAA,EAAD,CACIU,KAAK,OACLiC,UAAQ,EACRnD,IAAK5G,EAAStC,OAAS,mBACvBsM,UAAQ,EACRlD,MAAO9G,EAASW,UAAY2I,EAAS,QAN7BtJ,EAASlE,UAJjC,SAeI,cAAC8N,GAAA,EAAMnB,QAAP,UACI,cAAC,GAAD,CAAalM,QAASyD,OAdrBA,EAASlE,kBCVnB,SAASmO,GAAT,GAAgD,IAAD,IAAnB5O,EAAmB,EAAnBA,SACvC,OACI,eAAC6O,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,WACK7O,EAASmF,aACN,cAAC4J,GAAA,EAAD,CAAOlC,SAAS,MAAMC,MAAM,MAAMhE,QAAQ,WAAW2C,MAAO,CAACuD,UAAW,YAE5E,cAAC/D,GAAA,EAAK6D,MAAN,UACI,eAAC7D,GAAA,EAAD,WACI,cAACA,GAAA,EAAKc,MAAN,CAAYN,MAAO,CAACwD,aAAc,GAAIxC,KAAK,OAAOiC,UAAQ,EAACnD,KAAK,UAAAvL,EAASqE,YAAT,eAAehC,QAAS,qBACxF,eAAC4I,GAAA,EAAKmC,QAAN,WACI,cAACnC,GAAA,EAAK2B,OAAN,CAAa1B,GAAImB,IAAMjB,GAAE,sBAAiBpL,EAASF,IAAnD,SACKE,EAAS6B,QAEd,eAACoJ,GAAA,EAAK6C,YAAN,wBAA4B,cAAC,IAAD,CAAM1C,GAAE,oBAAepL,EAASoE,cAAhC,mBAAiDpE,EAASqE,YAA1D,aAAiD,EAAejC,iBAC3FpC,EAASmE,QACN,cAAC8G,GAAA,EAAK6C,YAAN,UACI,cAACiB,GAAA,EAAD,CAAOtB,OAAK,EAACX,MAAM,SAAnB,6CAKP9M,EAASgE,UAAYhE,EAASmE,QAC3B,cAAC8G,GAAA,EAAK6C,YAAN,UACI,cAACiB,GAAA,EAAD,CAAOtB,OAAK,EAACX,MAAM,QAAnB,yDASxB,cAAC+B,EAAA,EAAD,UACI,iCACI,cAACb,GAAA,EAAD,CAAMrC,KAAK,UADf,IAC2BlF,kBAAOzG,EAASgC,KAAO,sBAC9C,cAACgM,GAAA,EAAD,CAAMrC,KAAK,WAFf,IAE4B3L,EAASkC,WAGzC,cAAC2M,EAAA,EAAD,CAASK,WAAS,EAAlB,SACI,cAAC,GAAD,CAA0BjL,UAAWjE,EAASiE,cAElD,eAAC4K,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,+BAAOnP,EAAS+B,cAChB,cAAC6J,EAAA,EAAD,CACIV,GAAImB,IACJjB,GAAE,sBAAiBpL,EAASF,IAC5BgN,MAAM,OACNsC,QAAQ,QACRtG,QAAQ,eCtDb8B,oBAAS,WACpB,IACQyE,EADkB3E,IAAlBjD,cACA4H,kBAER,OACI,mCACKA,EAAkBf,KAAI,mCAAEgB,EAAF,KAAS9I,EAAT,YACnB,eAAC,WAAD,WACI,cAACoG,EAAA,EAAD,CAAQ2C,KAAG,EAACzC,MAAM,OAAlB,SACKwC,IAGJ9I,EAAW8H,KAAI,SAAAtO,GAAQ,OACpB,cAAC4O,GAAD,CAAoC5O,SAAUA,GAAvBA,EAASF,SANzBwP,W,UCXhB,SAASE,KACpB,OACI,cAAC,WAAD,UACI,cAACC,GAAA,EAAD,CAAalC,OAAK,EAAC9B,MAAO,CAAEkB,UAAW,IAAvC,SACI,eAACkC,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAASpD,MAAO,CAAEiE,UAAW,KAA7B,SACI,eAACD,GAAA,EAAD,WACI,eAACA,GAAA,EAAY7C,OAAb,CAAoBvK,OAAK,EAAzB,UACI,cAACoN,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,OAEJ,cAACF,GAAA,EAAYG,UAAb,UACI,cAACH,GAAA,EAAYE,KAAb,WAIZ,cAACd,EAAA,EAAD,UACI,eAACY,GAAA,EAAD,WACI,cAACA,GAAA,EAAYE,KAAb,IACA,cAACF,GAAA,EAAYE,KAAb,SAGR,cAACd,EAAA,EAAD,CAASK,WAAS,EAACzD,MAAO,CAAEiE,UAAW,MACvC,cAACb,EAAA,EAAD,CAASM,UAAQ,EAAjB,SACI,cAACvD,EAAA,EAAD,CAAQiE,UAAQ,EAAC/C,MAAM,OAAOsC,QAAQ,QAAQtG,QAAQ,kBChB/D8B,oBAAS,WACpB,IAAQnD,EAAkBiD,IAAlBjD,cACArE,EAAoEqE,EAApErE,eAAgBb,EAAoDkF,EAApDlF,mBAAoBQ,EAAgC0E,EAAhC1E,gBAAiBnG,EAAe6K,EAAf7K,WAC7D,EAAsCkT,oBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KAYA,OAJAC,qBAAU,WACF1N,EAAmBkK,MAAQ,GAAGrJ,MACnC,CAACb,EAAmBkK,KAAMrJ,IAGzB,eAAC8M,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa7C,MAAM,KAAnB,SACK7F,EAAc7E,mBAAqBmN,EAChC,qCACI,cAACP,GAAD,IACA,cAACA,GAAD,OAGJ,cAAC,IAAD,CACIY,UAAW,EACXC,SArBpB,WACIL,GAAe,GACfjN,EAAgB,IAAIjG,EAAaF,EAAY0T,YAAc,IAC3DlN,IAAiBhE,MAAK,kBAAM4Q,GAAe,OAmB3BO,SAAUR,KAAiBnT,GACvBA,EAAW0T,YAAc1T,EAAW4T,WACxCC,aAAa,EALjB,SAOI,cAAC,GAAD,QAIZ,cAACP,EAAA,EAAKC,OAAN,CAAa7C,MAAM,IAAnB,SACI,cAAC,EAAD,MAEJ,cAAC4C,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,SACI,cAACoD,EAAA,EAAD,CAAQ3D,OAAQgD,Y,4BCvCjB,SAASY,GAAYC,GAChC,MAAsBC,aAASD,EAAMjF,MAArC,mBAAOmF,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY/S,MAAO6S,EAAKG,WAAaH,EAAK7S,MAA1C,UACI,gCAAQ0S,EAAMO,QACd,iDAAWL,GAAWF,IACrBG,EAAKG,SAAWH,EAAK7S,MAClB,cAAC6Q,GAAA,EAAD,CAAOtB,OAAK,EAACX,MAAM,MAAnB,SAA0BiE,EAAK7S,QAC/B,QCZD0M,oBAAS,WACpB,IAAO7G,EAAa2G,IAAb3G,UACP,OACI,cAAC,KAAD,CACIqN,cAAe,CAACC,MAAO,GAAIC,SAAU,GAAIpT,MAAO,MAChDqT,SAAU,SAACtL,EAAD,OAAUuL,EAAV,EAAUA,UAAV,OAAyBzN,EAAU1D,MAAM4F,GAAQ6D,OAAM,SAAA5L,GAAK,OAClEsT,EAAU,CAACtT,MAAO,kCAH1B,SAKK,gBAAEuT,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAcrT,EAA9B,EAA8BA,OAA9B,OACG,eAAC,KAAD,CAAMsT,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAAChF,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,wBAAwBgE,MAAM,OAAOkC,UAAU,WACvE,cAAC2B,GAAD,CAAahF,KAAK,QAAQkG,YAAY,UACtC,cAAClB,GAAD,CAAahF,KAAK,WAAWkG,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACInG,KAAK,QAAQoG,OAAQ,kBACrB,cAAChD,GAAA,EAAD,CAAOtD,MAAO,CAACwD,aAAc,IAAKxB,OAAK,EAACX,MAAM,MAAMhE,QAASzK,EAAOH,WAExE,cAAC0N,EAAA,EAAD,CAAQjJ,QAAS+O,EAAc7F,UAAQ,EAAC/C,QAAQ,QAAQgJ,KAAK,SAASvE,OAAK,a,mBCjBhF,SAASyE,GAAT,GAA4C,IAAjB3T,EAAgB,EAAhBA,OACtC,OACI,cAAC4T,GAAA,EAAD,CAAS/T,OAAK,EAAd,SACKG,GACG,cAAC4T,GAAA,EAAQ7D,KAAT,UACK/P,EAAOiQ,KAAI,SAAC4D,EAAUC,GAAX,OACR,cAACF,GAAA,EAAQhH,KAAT,UACKiH,GADcC,UCJ5BvH,oBAAS,WACpB,IAAO7G,EAAa2G,IAAb3G,UACP,OACI,cAAC,KAAD,CACIqN,cAAe,CAAChP,YAAa,GAAIiP,MAAO,GAAIC,SAAU,GAAIpT,MAAO,MACjEqT,SAAU,SAACtL,EAAD,OAAUuL,EAAV,EAAUA,UAAV,OAAyBzN,EAAUxD,SAAS0F,GAAQ6D,OAAM,SAAA5L,GAAK,OACrEsT,EAAU,CAACtT,cACfkU,iBAAkBC,KAAW,CACzBjQ,YAAaiQ,OAAaC,WAC1B7R,SAAU4R,OAAaC,WACvBjB,MAAOgB,OAAaC,WAAWjB,QAC/BC,SAAUe,OAAaC,aAR/B,SAWK,gBAAEb,EAAF,EAAEA,aAAcC,EAAhB,EAAgBA,aAAcrT,EAA9B,EAA8BA,OAAQkU,EAAtC,EAAsCA,QAASC,EAA/C,EAA+CA,MAA/C,OACG,eAAC,KAAD,CAAMb,UAAU,gBAAgBJ,SAAUE,EAAcG,aAAa,MAArE,UACI,cAAChF,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,2BAA2BgE,MAAM,OAAOkC,UAAU,WAC1E,cAAC2B,GAAD,CAAahF,KAAK,cAAckG,YAAY,iBAC5C,cAAClB,GAAD,CAAahF,KAAK,WAAWkG,YAAY,aACzC,cAAClB,GAAD,CAAahF,KAAK,QAAQkG,YAAY,UACtC,cAAClB,GAAD,CAAahF,KAAK,WAAWkG,YAAY,WAAWC,KAAK,aACzD,cAAC,KAAD,CACInG,KAAK,QAAQoG,OAAQ,kBACrB,cAACC,GAAD,CAAkB3T,OAAQA,EAAOH,WAErC,cAAC0N,EAAA,EAAD,CAAQiE,UAAW0C,IAAYC,GAASd,EACpC/O,QAAS+O,EAAc7F,UAAQ,EAAC/C,QAAQ,WAAWgJ,KAAK,SAASvE,OAAK,aC3B/E3C,gBAAS,WACpB,MAAkCF,IAA1B3G,EAAR,EAAQA,UAAWiE,EAAnB,EAAmBA,WACnB,OACI,cAAC6G,EAAA,EAAD,CAAS/D,UAAQ,EAACkE,UAAU,SAASxC,UAAQ,EAACmF,UAAU,WAAxD,SACI,eAAC3G,EAAA,EAAD,CAAWoB,MAAI,EAAf,UACI,eAACQ,EAAA,EAAD,CAAQ1B,GAAG,KAAKJ,UAAQ,EAAxB,UACI,cAACiB,EAAA,EAAD,CAAOU,KAAK,UAAUlB,IAAI,mBAAmBC,IAAI,OAAOC,MAAO,CAAEwD,aAAc,MADnF,kBAIClL,EAAU0O,WACP,qCACI,cAAC7F,EAAA,EAAD,CAAQ1B,GAAG,KAAKJ,UAAQ,EAAChC,QAAQ,4BACjC,cAAC8C,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAcqB,KAAK,OAAO3B,UAAQ,EAAvD,kCAKJ,qCACI,cAACc,EAAA,EAAD,CAAQW,QAAS,kBAAMvE,EAAWa,UAAU,cAAC,GAAD,MAAgB4D,KAAK,OAAO3B,UAAQ,EAAhF,oBAGA,cAACc,EAAA,EAAD,CAAQW,QAAS,kBAAMvE,EAAWa,UAAU,cAAC,GAAD,MAAmB4D,KAAK,OAAO3B,UAAQ,EAAnF,kC,UCrBT,SAAS4H,GAAT,GAA4E,IAAD,IAAhD5H,gBAAgD,aAA/BhC,eAA+B,MAArB,aAAqB,EACtF,OACI,cAAC6J,GAAA,EAAD,CAAQ5F,QAAQ,EAAMjC,SAAUA,EAAhC,SACI,cAAC4F,EAAA,EAAD,CAAQ5H,QAASA,M,cCAd,SAAS8J,GAAWhC,GAC/B,MAAsBC,aAASD,EAAMjF,MAArC,mBAAOmF,EAAP,KAAcC,EAAd,KACA,OACI,eAACC,GAAA,EAAKC,MAAN,CAAY/S,MAAO6S,EAAKG,WAAaH,EAAK7S,MAA1C,UACI,gCAAQ0S,EAAMO,QACd,oDAAcL,GAAWF,IACxBG,EAAKG,SAAWH,EAAK7S,MAClB,cAAC6Q,GAAA,EAAD,CAAOtB,OAAK,EAACX,MAAM,MAAnB,SAA0BiE,EAAK7S,QAC/B,Q,cCRD,SAAS2U,GAAcjC,GAClC,MAA+BC,aAASD,EAAMjF,MAA9C,mBAAOmF,EAAP,KAAcC,EAAd,KAAoB+B,EAApB,KACA,OACI,eAAC9B,GAAA,EAAKC,MAAN,CAAY/S,MAAO6S,EAAKG,WAAaH,EAAK7S,MAA1C,UACI,gCAAQ0S,EAAMO,QACd,cAAC4B,GAAA,EAAD,CACIC,WAAS,EACTC,QAASrC,EAAMqC,QACfhQ,MAAO6N,EAAM7N,OAAS,KACtBgK,SAAU,SAACS,EAAGwF,GAAJ,OAAUJ,EAAQK,SAASD,EAAEjQ,QACvCmQ,OAAQ,kBAAMN,EAAQO,YAAW,IACjCxB,YAAajB,EAAMiB,cAGtBd,EAAKG,SAAWH,EAAK7S,MAClB,cAAC6Q,GAAA,EAAD,CAAOtB,OAAK,EAACX,MAAM,MAAnB,SAA0BiE,EAAK7S,QAC/B,QC3BT,IAAMoV,GAAkB,CAC3B,CAAClH,KAAM,SAAUnJ,MAAO,UACxB,CAACmJ,KAAM,UAAWnJ,MAAO,WACzB,CAACmJ,KAAM,OAAQnJ,MAAO,QACtB,CAACmJ,KAAM,OAAQnJ,MAAO,QACtB,CAACmJ,KAAM,QAASnJ,MAAO,SACvB,CAACmJ,KAAM,SAAUnJ,MAAO,W,qBCAb,SAASsQ,GAAY3C,GAChC,MAA+BC,aAASD,EAAMjF,MAA9C,mBAAOmF,EAAP,KAAcC,EAAd,KAAoB+B,EAApB,KACA,OACI,eAAC9B,GAAA,EAAKC,MAAN,CAAY/S,MAAO6S,EAAKG,WAAaH,EAAK7S,MAA1C,UACI,cAAC,KAAD,uCACQ4S,GACAF,GAFR,IAGI4C,SAAW1C,EAAM7N,OAAS,IAAIuB,KAAKsM,EAAM7N,QAAW,KACpDgK,SAAU,SAAAhK,GAAK,OAAI6P,EAAQK,SAASlQ,OAEvC8N,EAAKG,SAAWH,EAAK7S,MAClB,cAAC6Q,GAAA,EAAD,CAAOtB,OAAK,EAACX,MAAM,MAAnB,SAA0BiE,EAAK7S,QAC/B,QCAD0M,oBAAS,WAEpB,IAAMrM,EAAUkV,eACRhM,EAAkBiD,IAAlBjD,cACA/C,EAAmE+C,EAAnE/C,eAAgBG,EAAmD4C,EAAnD5C,eAAgBjB,EAAmC6D,EAAnC7D,aAAchB,EAAqB6E,EAArB7E,iBAC9C9C,EAAO4T,eAAP5T,GAER,EAAgCgQ,mBAA6B,IAAInO,GAAjE,mBAAO3B,EAAP,KAAiBuD,EAAjB,KAEM6O,EAAmBC,KAAW,CAChCxQ,MAAOwQ,OAAaC,SAAS,kCAC7BvQ,YAAasQ,OAAaC,SAAS,wCACnCxQ,SAAUuQ,OAAaC,WACvBtQ,KAAMqQ,OAAaC,SAAS,oBAAoBqB,WAChDzR,MAAOmQ,OAAaC,WACpBrQ,KAAMoQ,OAAaC,aAqBvB,OAjBArC,qBAAU,WACFnQ,GAAI8D,EAAa9D,GAAIV,MAAK,SAAAY,GAAQ,OAAIuD,EAAY,IAAI5B,EAAmB3B,SAC9E,CAACF,EAAI8D,IAeJhB,EAAyB,cAAC8P,GAAD,CAAkB5J,QAAQ,wBAGnD,eAAC+F,EAAA,EAAD,CAASM,UAAQ,EAAjB,UACI,cAACvC,EAAA,EAAD,CAAQ9D,QAAQ,mBAAmByG,KAAG,EAACzC,MAAM,SAC7C,cAAC,KAAD,CACIsF,iBAAkBA,EAClBwB,oBAAkB,EAACxC,cAAepR,EAClCuR,SAAU,SAAAtL,GAAM,OArB5B,SAA0BjG,GACtB,GAAKA,EAASF,GAOV+E,EAAe7E,GAAUZ,MAAK,kBAAMb,EAAQC,KAAR,sBAA4BwB,EAASF,YAP3D,CACd,IAAI8E,EAAW,2BACR5E,GADQ,IAEXF,GAAI+T,iBAERnP,EAAeE,GAAaxF,MAAK,kBAAMb,EAAQC,KAAR,sBAA4BoG,EAAY9E,SAevDgU,CAAiB7N,IAHzC,SAIK,gBAAGwL,EAAH,EAAGA,aAAcc,EAAjB,EAAiBA,QAASb,EAA1B,EAA0BA,aAAcc,EAAxC,EAAwCA,MAAxC,OACG,eAAC,KAAD,CAAMb,UAAU,UAAUJ,SAAUE,EAAcG,aAAa,MAA/D,UACI,cAACjB,GAAD,CAAahF,KAAK,QAAQkG,YAAY,UACtC,cAACe,GAAD,CAAYmB,KAAM,EAAGlC,YAAY,cAAclG,KAAK,gBACpD,cAACkH,GAAD,CAAeI,QAASK,GAAiBzB,YAAY,WAAWlG,KAAK,aACrE,cAAC4H,GAAD,CACIS,gBAAgB,OAChBrI,KAAK,OACLsI,gBAAc,EACdC,YAAY,OACZC,WAAW,yBAEf,cAACvH,EAAA,EAAD,CAAQ9D,QAAQ,oBAAoByG,KAAG,EAACzC,MAAM,SAC9C,cAAC6D,GAAD,CAAakB,YAAY,OAAOlG,KAAK,SACrC,cAACgF,GAAD,CAAakB,YAAY,QAAQlG,KAAK,UACtC,cAACC,EAAA,EAAD,CACIiE,SAAU6B,IAAiBc,IAAUD,EACrC5P,QAAS+O,EACTtC,QAAQ,QAAQvD,UAAQ,EACxBiG,KAAK,SACLhJ,QAAQ,WAEZ,cAAC8C,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,aAAagE,QAAQ,QAAQ0C,KAAK,SAAShJ,QAAQ,uB,oBCxEjF8B,gBAAS,YAAsD,IAAtBxB,EAAqB,EAArBA,WAC5CJ,EAAiB0B,IAAjB1B,aAWR,OATAiH,qBAAU,WAIN,OAHI7G,GACAJ,EAAaG,oBAAoBC,GAE9B,WACHJ,EAAaqB,mBAElB,CAACrB,EAAcI,IAGd,qCACI,cAACyF,EAAA,EAAD,CACIG,UAAU,SACVnC,SAAS,MACT/B,UAAQ,EACRgC,MAAM,OACNrB,MAAO,CAAE2I,OAAQ,QALrB,SAOI,cAACxH,EAAA,EAAD,sCAEJ,eAACiC,EAAA,EAAD,CAAShC,UAAQ,EAACsC,UAAQ,EAA1B,UACI,cAAC,KAAD,CACIoC,SAAU,SAACtL,EAAD,OAAWoO,EAAX,EAAWA,UAAX,OACNrL,EAAasB,WAAWrE,GAAQ7G,MAAK,kBAAMiV,QAC/CjD,cAAe,CAAE/R,KAAM,IACvB+S,iBAAkBC,KAAW,CACzBhT,KAAMgT,OAAaC,aAL3B,SAQK,gBAAGZ,EAAH,EAAGA,aAAca,EAAjB,EAAiBA,QAASd,EAA1B,EAA0BA,aAA1B,OACG,cAAC,KAAD,CAAME,UAAU,UAAhB,SACI,cAAC,KAAD,CAAOhG,KAAK,OAAZ,SACK,SAACiF,GAAD,OACG,sBAAKnF,MAAO,CAAEK,SAAU,YAAxB,UACI,cAAC4E,EAAA,EAAD,CAAQ3D,OAAQ2E,IAChB,kDACIG,YAAY,mEACZkC,KAAM,GACFnD,EAAME,OAHd,IAIIwD,WAAY,SAAA5G,GACM,UAAVA,EAAEhP,KAAmBgP,EAAE6G,UAGb,UAAV7G,EAAEhP,KAAoBgP,EAAE6G,WACxB7G,EAAEC,iBACF4E,GAAWd,oBAU/C,cAAC+C,GAAA,EAAQ1F,MAAT,UACK9F,EAAaC,SAASqF,KAAI,SAAAtE,GAAO,OAC9B,eAACwK,GAAA,EAAD,WACI,cAACA,GAAA,EAAQC,OAAT,CAAgBlJ,IAAKvB,EAAQ3H,OAAS,qBACtC,eAACmS,GAAA,EAAQpH,QAAT,WACI,cAACoH,GAAA,EAAQE,OAAT,CAAgBxJ,GAAImB,IAAMjB,GAAE,oBAAepB,EAAQvJ,UAAnD,SACKuJ,EAAQ5H,cAEb,cAACoS,GAAA,EAAQG,SAAT,UACI,gCAAMC,aAAoB5K,EAAQC,WAAlC,YAEJ,cAACuK,GAAA,EAAQK,KAAT,CAAcpJ,MAAO,CAAEqJ,WAAY,YAAnC,SAAkD9K,EAAQ3K,YATpD2K,EAAQlK,kBCjExCiV,GAAqB,CACvB9P,OAAQ,mBAGN+P,GAAyB,CAC3BlJ,SAAU,WACVmJ,OAAQ,KACRC,KAAM,KACN5H,MAAO,OACP6H,OAAQ,OACRrI,MAAO,SAOIlC,gBAAS,YAAsD,IAAD,IAAnB5K,EAAmB,EAAnBA,SACtD,EAA+E0K,IAAvEjD,cAAiBzC,EAAzB,EAAyBA,iBAAkBrC,EAA3C,EAA2CA,QAASuC,EAApD,EAAoDA,qBACpD,OACI,eAAC2J,EAAA,EAAQC,MAAT,WACI,eAACD,EAAA,EAAD,CAASpB,OAAK,EAACZ,SAAS,MAAMpB,MAAO,CAAE2J,QAAS,KAAhD,UACKpV,EAASmF,aACN,cAAC4J,GAAA,EAAD,CAAOtD,MAAO,CAAE4J,UAAW,WAAYC,OAAQ,IAAMJ,MAAO,GAAIK,IAAK,IACjEC,QAAM,EAAC1I,MAAM,MAAMhE,QAAQ,aAEnC,cAACiD,EAAA,EAAD,CAAOR,IAAG,iCAA4BvL,EAAS8B,SAArC,QAAqDyL,OAAK,EAAC9B,MAAOsJ,KAC5E,cAAClG,EAAA,EAAD,CAASpD,MAAOuJ,GAAwBvH,OAAK,EAA7C,SACI,cAACxC,GAAA,EAAK6D,MAAN,UACI,cAAC7D,GAAA,EAAD,UACI,eAACA,GAAA,EAAKmC,QAAN,WACI,cAACR,EAAA,EAAD,CACIH,KAAK,OACL3D,QAAS9I,EAAS6B,MAClB4J,MAAO,CAAEqB,MAAO,WAEpB,4BAAIrG,kBAAOzG,EAASgC,KAAO,iBAC3B,2CACc,iCAAQ,cAAC,IAAD,CAAMoJ,GAAE,8BAAepL,EAASqE,YAAxB,aAAe,EAAe5D,UAAtC,mBAAmDT,EAASqE,YAA5D,aAAmD,EAAejC,+BAO5G,cAACyM,EAAA,EAAD,CAASM,UAAQ,EAACtC,SAAS,SAA3B,SACK7M,EAASmE,OACN,qCACI,cAACyH,EAAA,EAAD,CACIkB,MAAO9M,EAASmF,YAAc,QAAU,MACxCiK,QAAQ,OACR3B,OAAK,EACL3E,QAAS9I,EAASmF,YAAc,uBAAyB,kBACzDoH,QAASrH,EACTvC,QAASA,IAEb,cAACiJ,EAAA,EAAD,CAAQV,GAAImB,IACRwD,SAAU7P,EAASmF,YACnBiG,GAAE,kBAAapL,EAASF,IACxBgN,MAAM,SACNsC,QAAQ,QAJZ,6BASJpP,EAASgE,QACT,cAAC4H,EAAA,EAAD,CAAQjJ,QAASA,EAAS4J,QAASvH,EAAnC,+BAEA,cAAC4G,EAAA,EAAD,CACIiE,SAAU7P,EAASmF,YACnBxC,QAASA,EACT4J,QAASvH,EACT8H,MAAM,OAJV,mCClELlC,gBAAS,YAAkD,IAAnB5K,EAAkB,EAAlBA,SACnD,OACI,eAAC6O,EAAA,EAAQC,MAAT,WACI,cAACD,EAAA,EAAD,CAAShC,SAAS,MAAlB,SACI,eAACqD,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa7C,MAAO,EAApB,SACI,cAACU,GAAA,EAAD,CAAMvB,KAAK,QAAQK,MAAM,OAAOnB,KAAK,WAEzC,cAACuE,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,SACI,4BAAItN,EAAS+B,qBAIzB,cAAC8M,EAAA,EAAD,CAAShC,UAAQ,EAAjB,SACI,eAACqD,EAAA,EAAD,CAAMuF,cAAc,SAApB,UACI,cAACvF,EAAA,EAAKC,OAAN,CAAa7C,MAAO,EAApB,SACI,cAACU,GAAA,EAAD,CAAMrC,KAAK,WAAWc,KAAK,QAAQK,MAAM,WAE7C,cAACoD,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,SACR,+BACG7G,kBAAOzG,EAASgC,KAAO,+BAK1B,cAAC6M,EAAA,EAAD,CAAShC,UAAQ,EAAjB,SACI,eAACqD,EAAA,EAAD,CAAMuF,cAAc,SAApB,UACI,cAACvF,EAAA,EAAKC,OAAN,CAAa7C,MAAO,EAApB,SACI,cAACU,GAAA,EAAD,CAAMrC,KAAK,SAASc,KAAK,QAAQK,MAAM,WAE3C,cAACoD,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,SACI,iCAAOtN,EAASkC,MAAhB,KAAyBlC,EAASiC,qBC/B3C2I,gBAAS,YAA4E,IAAD,IAAxC5K,SAAYiE,EAA4B,EAA5BA,UAAWI,EAAiB,EAAjBA,KAC9E,OAAKJ,EAED,qCACI,eAAC4K,EAAA,EAAD,CACIG,UAAU,SACVvD,MAAO,CAAE2I,OAAQ,QACjBvH,SAAS,MACTqC,WAAS,EACTpE,UAAQ,EACRgC,MAAM,OANV,UAQK7I,EAAUyR,OARf,IAQ6C,IAArBzR,EAAUyR,OAAe,SAAW,SAR5D,YAUA,cAAC7G,EAAA,EAAD,CAAShC,UAAQ,EAAjB,SACI,cAACuB,GAAA,EAAD,CAAMuH,SAAO,EAACC,SAAO,EAArB,SACK3R,EAAUqK,KAAI,SAAA3J,GAAQ,OACnB,eAACsG,GAAA,EAAD,CAAMQ,MAAO,CAAEK,SAAU,YAAzB,UACKnH,EAASlE,YAAT,OAAsB4D,QAAtB,IAAsBA,OAAtB,EAAsBA,EAAM5D,WACzB,cAACsO,GAAA,EAAD,CACItD,MAAO,CAAEK,SAAU,YACnBgB,MAAM,SACN0I,OAAO,QAHX,kBAOJ,cAACzJ,EAAA,EAAD,CAAOU,KAAK,OAAOlB,IAAK5G,EAAStC,OAAS,qBAC1C,eAAC4I,GAAA,EAAKmC,QAAN,CAAcqI,cAAc,SAA5B,UACI,cAACxK,GAAA,EAAK2B,OAAN,CAAa1B,GAAG,KAAhB,SACI,cAAC,IAAD,CAAME,GAAE,oBAAezG,EAASlE,UAAhC,SAA6CkE,EAASvC,gBAEzDuC,EAASW,WACV,cAAC2F,GAAA,EAAK4K,MAAN,CAAYpK,MAAO,CAAEqB,MAAO,UAA5B,4BAfoCnI,EAASlE,oBAhBlD,QCAZmK,gBAAS,WAEpB,IAAOnD,EAAiBiD,IAAjBjD,cACkBzH,EAAmEyH,EAArFhF,iBAA4BmB,EAAyD6D,EAAzD7D,aAAchB,EAA2C6E,EAA3C7E,iBAAkBwC,EAAyBqC,EAAzBrC,sBAC5DtF,EAAM4T,eAAN5T,GAOP,OALAmQ,qBAAU,WAEN,OADInQ,GAAI8D,EAAa9D,GACd,kBAAMsF,OACf,CAACtF,EAAI8D,EAAcwB,IAEjBxC,IAAqB5C,EAAiB,cAAC0S,GAAD,IAGtC,eAACxC,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,UACI,cAAC,GAAD,CAAwBtN,SAAUA,IAClC,cAAC,GAAD,CAAsBA,SAAUA,IAChC,cAAC,GAAD,CAAsBoJ,WAAYpJ,EAASF,QAE/C,cAACoQ,EAAA,EAAKC,OAAN,CAAa7C,MAAO,EAApB,SACI,cAAC,GAAD,CAAyBtN,SAAUA,YC3BpC,SAAS8V,KACpB,IACA,EAA4BhG,mBAAS,MAArC,mBAAOzR,EAAP,KAAemT,EAAf,KA0BA,OACI,qCACI,cAAC5E,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,yBACxB,cAAC+F,EAAA,EAAD,UACI,eAACjD,EAAA,EAAOkD,MAAR,CAAciH,OAAO,IAArB,UACI,cAACnK,EAAA,EAAD,CAAQW,QA7BxB,WACItP,IAAMkC,IAAI6W,uBAA6BlM,OAAM,SAAAoI,GAAG,OAAIxO,QAAQC,IAAIuO,EAAIpU,cA4BvBgL,QAAQ,YAAY2E,OAAK,EAACwI,SAAO,IAClE,cAACrK,EAAA,EAAD,CAAQW,QA1BxB,WACItP,IAAMkC,IAAI6W,yBAA+BlM,OAAM,SAAAoI,GAAG,OAAIxO,QAAQC,IAAIuO,EAAIpU,cAyBvBgL,QAAQ,cAAc2E,OAAK,EAACwI,SAAO,IACtE,cAACrK,EAAA,EAAD,CAAQW,QAXxB,WACItP,IAAMqC,KAAK0W,iBAAwB,IAAIlM,OAAM,SAAAoI,GAAG,OAAIV,EAAUU,OAUVpJ,QAAQ,mBAAmB2E,OAAK,EAACwI,SAAO,IAChF,cAACrK,EAAA,EAAD,CAAQW,QAxBxB,WACItP,IAAMkC,IAAI6W,0BAAgClM,OAAM,SAAAoI,GAAG,OAAIxO,QAAQC,IAAIuO,EAAIpU,cAuBvBgL,QAAQ,eAAe2E,OAAK,EAACwI,SAAO,IACxE,cAACrK,EAAA,EAAD,CAAQW,QArBxB,WACItP,IAAMkC,IAAI6W,0BAAgClM,OAAM,SAAAoI,GAAG,OAAIxO,QAAQC,IAAIuO,EAAIpU,cAoBtBgL,QAAQ,eAAe2E,OAAK,EAACwI,SAAO,IACzE,cAACrK,EAAA,EAAD,CAAQW,QAlBxB,WACItP,IAAMkC,IAAI6W,2BAAiClM,OAAM,SAAAoI,GAAG,OAAIxO,QAAQC,IAAIuO,EAAIpU,cAiB5BgL,QAAQ,WAAW2E,OAAK,EAACwI,SAAO,SAIpE5X,GAAU,cAAC2T,GAAD,CAAkB3T,OAAQA,OC3CrC,SAAS6X,KACpB,OACI,eAACrH,EAAA,EAAD,CAASgD,aAAW,EAApB,UACI,eAACjF,EAAA,EAAD,CAAQN,MAAI,EAAZ,UACI,cAAC0B,GAAA,EAAD,CAAMrC,KAAK,WADf,4DAIA,cAACkD,EAAA,EAAQsH,OAAT,UACI,cAACvK,EAAA,EAAD,CAAQV,GAAImB,IAAMjB,GAAG,cAAc6K,SAAO,EAA1C,4CCPDrL,oBAAS,WAAwB,IAAD,IACnCjN,EAAgB+M,IAAhB/M,YACR,OACI,eAACqN,EAAA,EAAD,WACI,cAAC4B,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,iBACxB,cAAC8D,EAAA,EAAD,CAAQ2C,KAAG,EAACrE,GAAG,KAAK4B,MAAM,MAAMhE,QAAO,UAAEnL,EAAYO,aAAd,aAAE,EAAmBkY,WAC3D,UAAAzY,EAAYO,aAAZ,eAAmB2B,UAChB,eAACgP,EAAA,EAAD,WACI,cAACjC,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAQ,cAAcgE,MAAM,SAC5C,sBAAMrB,MAAO,CAACkB,UAAW,QAAzB,SAAmChP,EAAYO,MAAM2B,mB,UCT1D+K,gBAAS,WACpB,IAAO5C,EAAc0C,IAAd1C,WAEP,OACI,cAACqO,GAAA,EAAD,CAAOzN,KAAMZ,EAAWW,MAAMC,KAAM0N,QAAStO,EAAWC,WAAYwE,KAAK,OAAzE,SACI,cAAC4J,GAAA,EAAMjJ,QAAP,UACKpF,EAAWW,MAAMtJ,Y,UCH5BkX,GAAQ,CACV,CAAEC,SAAU,gBAAiBC,KAAM,CAAE/X,IAAK,WAC1C,CAAE8X,SAAU,cAAeC,KAAM,CAAE/X,IAAK,SACxC,CAAE8X,SAAU,UAAWC,KAAM,CAAE/X,IAAK,aAGzBkM,gBAAS,WACpB,IAAQ7B,EAAiB2B,IAAjB3B,aAEJnB,EAIAmB,EAJAnB,mBACA1G,EAGA6H,EAHA7H,QACA+F,EAEA8B,EAFA9B,kBACAD,EACA+B,EADA/B,eAGJiJ,qBAAU,WACNrI,EAAmB1G,EAAST,YAC7B,CAACmH,EAAoB1G,IAMxB,OACI,cAACwV,GAAA,EAAIC,KAAL,CAAUhU,QAASsE,EAAnB,SACI,eAACiJ,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,SACI,cAACV,EAAA,EAAD,CAAQwC,QAAQ,OAAO9C,KAAK,WAAWxD,QAAS,iBAEpD,eAACoH,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,UACI,cAACoJ,GAAA,EAAD,CACIH,MAAOA,GACPK,KAAM,CAAE1H,WAAW,EAAM/C,UAAU,GACnC0K,YAAa,SAACnJ,EAAG/Q,GAAJ,OAdT,SAAC+Q,EAAmB/Q,GACxCiL,EAAmB1G,EAAST,SAAU8V,GAAM5Z,EAAKma,aAAuBL,KAAK/X,KAanCqY,CAAgBrJ,EAAG/Q,MAEjD,uBACA,cAACkR,GAAA,EAAKiB,MAAN,CAAYkI,YAAa,EAAzB,SACKhQ,EAAesH,KAAI,SAACtO,GAAD,OAChB,eAAC6N,GAAA,EAAD,CACI3C,GAAImB,IACJjB,GAAE,sBAAiBpL,EAASF,IAFhC,UAKI,cAACiM,EAAA,EAAD,CACIR,IAAG,iCAA4BvL,EAAS8B,SAArC,QACH2J,MAAO,CAAEiE,UAAW,IAAKuH,UAAW,WAExC,eAACpJ,GAAA,EAAKT,QAAN,WACI,cAACS,GAAA,EAAKjB,OAAN,CAAaoC,UAAU,SAAvB,SAAiChP,EAAS6B,QAC1C,eAACgM,GAAA,EAAKqJ,KAAN,CAAWlI,UAAU,SAArB,UACI,8BAAMvI,kBAAO,IAAIjC,KAAKxE,EAASgC,MAAO,YACtC,8BAAMyE,kBAAO,IAAIjC,KAAKxE,EAASgC,MAAO,oBAVzChC,EAASF,oBC3C/B8K,gBAAS,WACpB,IAAO7B,EAAgB2B,IAAhB3B,aACA7H,EAAqD6H,EAArD7H,QAAS2F,EAA4CkC,EAA5ClC,WAAYC,EAAgCiC,EAAhCjC,kBAAmBC,EAAagC,EAAbhC,UAE/C,OACI,cAAC2P,GAAA,EAAIC,KAAL,CAAUhU,QAASmE,EAAnB,SACI,eAACoJ,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,SACI,cAACV,EAAA,EAAD,CACIwC,QAAQ,OACR9C,KAAK,OACLxD,QAAwB,IAAd/B,EAAA,kCAAsC7F,QAAtC,IAAsCA,OAAtC,EAAsCA,EAASkB,aAA/C,wBACMlB,QADN,IACMA,OADN,EACMA,EAASkB,YADf,qBAKlB,cAAC8N,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,SACI,cAACO,GAAA,EAAKiB,MAAN,CAAYkI,YAAa,EAAzB,SACKnQ,EAAWyH,KAAI,SAAApN,GAAO,OACnB,cAAC,GAAD,CAAoCA,QAASA,GAA3BA,EAAQT,yB,UCjBvC,SAAS0W,GAAT,GAAmD,IAApBC,EAAmB,EAAnBA,SACtCC,EAAW,CACfjD,OAAQ,kBACRlG,YAAa,OACboJ,aAAc,MACdC,WAAY,OACZvI,UAAW,SACXmG,OAAQ,KAOJqC,EAASC,uBAAY,SAAAC,GACzBN,EAASM,EAAcpJ,KAAI,SAAC3N,GAAD,OAAec,OAAOC,OAAOf,EAAM,CAC5DgX,QAASC,IAAIC,gBAAgBlX,WAE9B,CAACyW,IACJ,EAAsDU,aAAY,CAAEN,WAA5DO,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,cAAeC,EAArC,EAAqCA,aAErC,OACE,gDAASF,KAAT,IAAyBtM,MAAOwM,EAAY,2BAAQZ,GAZrC,CACfnJ,YAAa,UAWiEmJ,EAA9E,UACE,qCAAWW,MACX,cAAChK,GAAA,EAAD,CAAMrC,KAAK,SAASc,KAAK,SACzB,cAACG,EAAA,EAAD,CAAQ9D,QAAQ,wB,qBCxBP,SAASoP,GAAT,GAAgE,IAAnCC,EAAkC,EAAlCA,aAAcC,EAAoB,EAApBA,WACtD,OACI,cAAC,KAAD,CACI7M,IAAK4M,EACL1M,MAAO,CAAC0J,OAAQ,IAAK7H,MAAO,QAC5B+K,mBAAoB,EACpBC,YAAa,EACbX,QAAQ,eACRY,QAAQ,EACRC,SAAU,EACVC,aAAc,EACdC,YAAY,EACZC,cAAe,SAAAC,GAAO,OAAIR,EAAWQ,MCTlC,SAASC,GAAT,GAA2D,IAA/BlW,EAA8B,EAA9BA,QAASjC,EAAqB,EAArBA,YAChD,EAA0BoP,mBAAc,IAAxC,mBAAOgJ,EAAP,KAAc1B,EAAd,KACA,EAA8BtH,qBAA9B,mBAAO8I,EAAP,KAAgBR,EAAhB,KAcA,OANAnI,qBAAU,WACN,OAAO,WACH6I,EAAM3V,SAAQ,SAACxC,GAAD,OAAeiX,IAAImB,gBAAgBpY,EAAKgX,eAE3D,CAACmB,IAGA,eAAC5I,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa7C,MAAO,EAApB,UACI,cAACV,EAAA,EAAD,CAAQE,MAAM,OAAOhE,QAAQ,uBAC7B,cAACqO,GAAD,CAAqBC,SAAUA,OAEnC,cAAClH,EAAA,EAAKC,OAAN,CAAa7C,MAAO,IACpB,eAAC4C,EAAA,EAAKC,OAAN,CAAa7C,MAAO,EAApB,UACI,cAACV,EAAA,EAAD,CAAQE,MAAM,OAAOhE,QAAQ,0BAC5BgQ,GAASA,EAAMpD,OAAS,GACrB,cAACwC,GAAD,CAAoBE,WAAYA,EAAYD,aAAcW,EAAM,GAAGnB,aAG3E,cAACzH,EAAA,EAAKC,OAAN,CAAa7C,MAAO,IACpB,eAAC4C,EAAA,EAAKC,OAAN,CAAa7C,MAAO,EAApB,UACI,cAACV,EAAA,EAAD,CAAQE,MAAM,OAAOhE,QAAQ,8BAC5BgQ,GAASA,EAAMpD,OAAS,GACrB,qCACI,qBAAK/D,UAAU,cAAclG,MAAO,CAAEiE,UAAW,IAAKsJ,SAAU,YAChE,eAACpN,EAAA,EAAOkD,MAAR,CAAciH,OAAQ,EAAtB,UACI,cAACnK,EAAA,EAAD,CAAQjJ,QAASA,EAAS4J,QAhClD,WACQqM,GACAA,EAAQK,mBAAmBC,QAAO,SAAAC,GAAI,OAAIzY,EAAYyY,OA8BKtN,UAAQ,EAACS,KAAK,UACzD,cAACV,EAAA,EAAD,CAAQiE,SAAUlN,EAAS4J,QAAS,kBAAM6K,EAAS,KAAK9K,KAAK,sBCtC1E1B,oBAAS,YAA4C,IAAD,EAAlB1J,EAAkB,EAAlBA,QAC7C,EAC6CwJ,IADrC3B,aAAgBqQ,EAAxB,EAAwBA,cAAe1Y,EAAvC,EAAuCA,YAAakG,EAApD,EAAoDA,UAChDjE,EADJ,EACIA,QAAS5B,EADb,EACaA,aAAcC,EAD3B,EAC2BA,YAC3B,EAAuC8O,oBAAS,GAAhD,mBAAOuJ,EAAP,KAAqBC,EAArB,KACA,EAA4BxJ,mBAAS,IAArC,mBAAOyJ,EAAP,KAAeC,EAAf,KAgBA,OACI,cAAC9C,GAAA,EAAIC,KAAL,UACI,eAACzG,EAAA,EAAD,WACI,eAACA,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,UACI,cAACV,EAAA,EAAD,CAAQwC,QAAQ,OAAO9C,KAAK,QAAQxD,QAAQ,WAC3CsQ,GACG,cAACxN,EAAA,EAAD,CACIwD,QAAQ,QACR3B,OAAK,EACL3E,QAASuQ,EAAe,SAAW,YACnC9M,QAAS,kBAAM+M,GAAgBD,SAI3C,cAACnJ,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,SACK+L,EACG,cAACR,GAAD,CAAmBnY,YA9BvC,SAA2BC,GACvBD,EAAYC,GAAMvB,MAAK,kBAAMka,GAAe,OA6BuB3W,QAASiE,IAE5D,cAACiH,GAAA,EAAKiB,MAAN,CAAYkI,YAAa,EAAzB,mBACK9V,EAAQmG,cADb,aACK,EAAgBiH,KAAI,SAAAlH,GAAK,OACtB,eAACyG,GAAA,EAAD,WACI,cAAC9B,EAAA,EAAD,CAAOR,IAAKnE,EAAMlI,MACjBka,GACG,eAACxN,EAAA,EAAOkD,MAAR,WACI,cAAClD,EAAA,EAAD,CACI6B,OAAK,EACLX,MAAM,QACNhE,QAAQ,OACR6C,KAAM,OAASvE,EAAMtH,GACrB+P,SAAUzI,EAAME,OAChB3E,QAAS4W,IAAW,OAASnS,EAAMtH,IAAM6C,EACzC4J,QAAS,SAAAmB,GAAC,OAzCtD,SAA4BtG,EAAcsG,GACtC8L,EAAU9L,EAAE+L,cAAc9N,MAC1B5K,EAAaqG,GAuCyCsS,CAAmBtS,EAAOsG,MAE5C,cAAC9B,EAAA,EAAD,CACI6B,OAAK,EACLX,MAAM,MACNR,KAAK,QACLX,KAAMvE,EAAMtH,GACZ+P,SAAUzI,EAAME,OAChB3E,QAAS4W,IAAWnS,EAAMtH,IAAM6C,EAChC4J,QAAS,SAAAmB,GAAC,OA7CtD,SAA2BtG,EAAcsG,GACrC8L,EAAU9L,EAAE+L,cAAc9N,MAC1B3K,EAAYoG,GA2C0CuS,CAAkBvS,EAAOsG,WApB5CtG,EAAMtH,mBCtClC8K,gBAAS,YAA2C,IAAlB1J,EAAiB,EAAjBA,QACtC6H,EAAgB2B,IAAhB3B,aAEDwN,EAAQ,CACV,CAACC,SAAU,QAASzE,OAAQ,kBAAM,cAAC2E,GAAA,EAAIC,KAAL,8BAClC,CAACH,SAAU,SAAUzE,OAAQ,kBAAM,cAAC,GAAD,CAAe7Q,QAASA,MAC3D,CAACsV,SAAU,SAAUzE,OAAQ,kBAAM,cAAC,GAAD,MACnC,CAACyE,SAAU,YAAazE,OAAQ,kBAAM,cAAC,GAAD,MACtC,CAACyE,SAAU,YAAazE,OAAQ,kBAAM,cAAC,GAAD,OAG1C,OACI,cAAC2E,GAAA,EAAD,CACIE,KAAM,CAACrJ,OAAO,EAAMf,UAAU,GAC9BoN,aAAa,QACbrD,MAAOA,EACPM,YAAa,SAACnJ,EAAG/Q,GAAJ,OAAaoM,EAAa7B,aAAavK,EAAKma,mB,oBCnBtDlM,gBAAU,YAA0C,IAAlB1J,EAAiB,EAAjBA,QAC7C,OACI,cAAC2N,EAAA,EAAD,UACI,eAACqB,EAAA,EAAD,WACI,cAACA,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,SACI,cAACrC,GAAA,EAAK6D,MAAN,UACI,eAAC7D,GAAA,EAAD,WACI,cAACA,GAAA,EAAKc,MAAN,CAAYC,QAAM,EAACS,KAAK,QAAQlB,IAAKrK,EAAQmB,OAAS,qBACtD,cAAC4I,GAAA,EAAKmC,QAAN,CAAcqI,cAAc,SAA5B,SACI,cAAC7I,EAAA,EAAD,CAAQ1B,GAAG,KAAKpC,QAAS5H,EAAQkB,uBAKjD,eAAC8N,EAAA,EAAKC,OAAN,CAAa7C,MAAO,EAApB,UACI,eAACuM,GAAA,EAAU/K,MAAX,CAAiBiH,OAAQ,EAAzB,UACI,cAAC8D,GAAA,EAAD,CAAW1I,MAAM,YAAYlO,MAAO/B,EAAQqE,iBAC5C,cAACsU,GAAA,EAAD,CAAW1I,MAAM,YAAYlO,MAAO/B,EAAQwG,oBAEhD,cAACoS,GAAA,EAAD,IACA,cAAC,GAAD,CAAc5Y,QAASA,eCrB5B0J,gBAAS,WACpB,IAAQnK,EAAaiT,eAAbjT,SACAsI,EAAiB2B,IAAjB3B,aACA5B,EAAsD4B,EAAtD5B,YAAaR,EAAyCoC,EAAzCpC,eAAgBzF,EAAyB6H,EAAzB7H,QAASgG,EAAgB6B,EAAhB7B,aAS9C,OAPA+I,qBAAU,WAEN,OADA9I,EAAY1G,GACL,WACHyG,EAAa,MAElB,CAACC,EAAa1G,EAAUyG,IAEvBP,EAAuB,cAAC+L,GAAD,CAAkB5J,QAAQ,uBAEjD,cAACoH,EAAA,EAAD,UACI,cAACA,EAAA,EAAKC,OAAN,CAAa7C,MAAO,GAApB,SACKpM,GACG,qCACI,cAAC,GAAD,CAAeA,QAASA,IACxB,cAAC,GAAD,CAAgBA,QAASA,c,2BCpBlC,SAAS6Y,GAAT,GAA+D,IAA7BC,EAA4B,EAAvCC,UAAyBC,EAAc,mBACtDzH,EAAe/H,IAA3B3G,UAAY0O,WACnB,OACI,cAAC,KAAD,2BACQyH,GADR,IAEInI,OAAQ,SAACnB,GAAD,OAAW6B,EAAa,cAACuH,EAAD,eAAepJ,IAAY,cAAC,KAAD,CAAUxF,GAAG,UC8CrER,oBAxCf,WACE,IAAMuP,EAAWC,eACjB,EAAiC1P,IAA1B/M,EAAP,EAAOA,YAAaoG,EAApB,EAAoBA,UASpB,OARAkM,qBAAU,WACJtS,EAAYF,MACdsG,EAAUuE,UAAU+R,SAAQ,kBAAM1c,EAAY8K,kBAE9C9K,EAAY8K,iBAEb,CAAC9K,EAAaoG,IAEZpG,EAAY6K,UAGf,qCACE,cAAC,IAAD,CAAgBsD,SAAS,eAAewO,iBAAe,IACvD,cAAC,GAAD,IACA,cAAC,KAAD,CAAOjP,OAAK,EAACkP,KAAK,IAAIN,UAAWO,KACjC,cAAC,KAAD,CAAOD,KAAM,QACXxI,OAAQ,kBACN,qCACE,cAAC,EAAD,IACA,cAAC/G,EAAA,EAAD,CAAWS,MAAO,CAAEkB,UAAW,OAA/B,SACE,eAAC,KAAD,WACE,cAACoN,GAAD,CAAc1O,OAAK,EAACkP,KAAK,cAAcN,UAAWQ,KAClD,cAACV,GAAD,CAAcQ,KAAK,kBAAkBN,UAAWS,KAChD,cAACX,GAAD,CAAiCQ,KAAM,CAAC,kBAAmB,eAAgBN,UAAWU,IAAnER,EAASzb,KAC5B,cAACqb,GAAD,CAAcQ,KAAK,sBAAsBN,UAAWW,KACpD,cAACb,GAAD,CAAcQ,KAAK,UAAUN,UAAWnE,KACxC,cAAC,KAAD,CAAOyE,KAAK,gBAAgBN,UAAWY,KACvC,cAAC,KAAD,CAAOZ,UAAW/D,mBAnBG,cAACxD,GAAD,CAAkB5J,QAAQ,sBChBhDgS,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB5b,MAAK,YAAkD,IAA/C6b,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCNC,SAASO,KACtB,IAAQC,EAAanB,eAAbmB,SAMR,OAJAtL,qBAAU,WACR9H,OAAOqT,SAAS,EAAG,KAClB,CAACD,IAEG,KCIF,IAAMhd,GAAUkd,eAEvBC,IAAS3J,OACP,cAACvH,EAAamR,SAAd,CAAuB1Y,MAAOvF,EAA9B,SACE,eAAC,KAAD,CAAQa,QAASA,GAAjB,UACE,cAAC+c,GAAD,IACA,cAAC,GAAD,SAGJM,SAASC,eAAe,SAM1Bf,O","file":"static/js/main.c6e5443b.chunk.js","sourcesContent":["export interface Pagination {\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n}\n\nexport class PaginatedResult<T> {\n    data: T;\n    pagination: Pagination;\n\n    constructor(data: T, pagination: Pagination) {\n        this.data = data;\n        this.pagination = pagination;\n    }\n}\n\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n\n    constructor(pageNumber = 1, pageSize = 2) {\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n    }\n}","import axios, { AxiosError, AxiosResponse } from 'axios';\nimport { toast } from 'react-toastify';\nimport { history } from '../..';\nimport { Activity, ActivityFormValues } from '../models/activity';\nimport { PaginatedResult } from '../models/pagination';\nimport { Photo, Profile, UserActivity } from '../models/profile';\nimport { User, UserFormValues } from '../models/user';\nimport { store } from '../stores/store';\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers.Authorization = `Bearer ${token}`\n    return config;\n})\n\naxios.interceptors.response.use(async response => {\n    if (process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n    if (pagination) {\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination));\n        return response as AxiosResponse<PaginatedResult<any>>\n    }\n    return response;\n}, (error: AxiosError) => {\n    const { data, status, config } = error.response!;\n    switch (status) {\n        case 400:\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            } else {\n                toast.error(data);\n            }\n            break;\n        case 401:\n            toast.error('unauthorised');\n            break;\n        case 404:\n            history.push('/not-found');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T>(response: AxiosResponse<T>) => response.data;\n\nconst requests = {\n    get: <T>(url: string) => axios.get<T>(url).then(responseBody),\n    post: <T>(url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T>(url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T>(url: string) => axios.delete<T>(url).then(responseBody),\n}\n\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', { params })\n        .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\n\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user)\n}\n\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadPhoto: (file: Blob) => {\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData, {\n            headers: { 'Content-type': 'multipart/form-data' }\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateProfile: (profile: Partial<Profile>) => requests.put(`/profiles`, profile),\n    updateFollowing: (username: string) => requests.post(`/follow/${username}`, {}),\n    listFollowings: (username: string, predicate: string) =>\n        requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listActivities: (username: string, predicate: string) =>\n        requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`)\n}\n\nconst agent = {\n    Activities,\n    Account,\n    Profiles\n}\n\nexport default agent;","import { Profile } from \"./profile\";\n\nexport interface Activity {\n    id: string;\n    title: string;\n    date: Date | null;\n    description: string;\n    category: string;\n    city: string;\n    venue: string;\n    hostUsername: string;\n    isCancelled: boolean;\n    isGoing: boolean;\n    isHost: boolean;\n    host?: Profile;\n    attendees: Profile[];\n}\n\nexport class Activity implements Activity {\n    constructor(init?: ActivityFormValues) {\n        Object.assign(this, init);\n    }\n}\n\nexport class ActivityFormValues {\n    id?: string = undefined;\n    title: string = '';\n    category: string = '';\n    description: string = '';\n    date: Date | null = null;\n    city: string = '';\n    venue: string = '';\n\n    constructor(activity?: ActivityFormValues) {\n        if (activity) {\n            this.id = activity.id;\n            this.title = activity.title;\n            this.category = activity.category;\n            this.description = activity.description;\n            this.date = activity.date;\n            this.city = activity.city;\n            this.venue = activity.venue;\n        }\n    }\n}","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n    photos?: Photo[];\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\n\nexport interface Photo {\n    id: string;\n    url: string;\n    isMain: boolean;\n}\n\nexport interface UserActivity {\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import { format } from \"date-fns\";\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\nimport { Profile } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ActivityStore {\n    activitiesRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInititial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n    constructor() {\n        makeAutoObservable(this)\n\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activitiesRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) => {\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value)\n\n        }\n    }\n\n    get axiosParams() {\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        })\n        return params;\n    }\n\n    get activitiesByDate() {\n        return Array.from(this.activitiesRegistry.values()).sort((a, b) =>\n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities() {\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date = format(activity.date!, 'dd MMM yyyy')\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as { [key: string]: Activity[] })\n        )\n    }\n\n    loadActivities = async () => {\n        this.loadingInititial = true;\n        try {\n            const result = await agent.Activities.list(this.axiosParams);\n            result.data.forEach(activity => {\n                this.setActivity(activity);\n            });\n            this.setPagination(result.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n        }\n    }\n\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n\n    loadActivity = async (id: string) => {\n        let activity = this.getActivity(id);\n        if (activity) {\n            this.selectedActivity = activity;\n            return activity;\n        } else {\n            this.loadingInititial = true;\n            try {\n                activity = await agent.Activities.details(id);\n                this.setActivity(activity);\n                runInAction(() => {\n                    this.selectedActivity = activity;\n                })\n                this.setLoadingInitial(false);\n                return activity;\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n    }\n\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!);\n        this.activitiesRegistry.set(activity.id, activity);\n    }\n\n    private getActivity = (id: string) => {\n        return this.activitiesRegistry.get(id);\n    }\n\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInititial = state;\n    }\n\n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            await agent.Activities.create(activity);\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    updateActivity = async (activity: ActivityFormValues) => {\n        this.loading = true;\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = { ...this.getActivity(activity.id), ...activity }\n                    this.activitiesRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activitiesRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees =\n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username)\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee)\n                    this.selectedActivity!.isGoing = true;\n                }\n                this.activitiesRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id)\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activitiesRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n\n    updateAttendeeFollowing = (username: string) => {\n        this.activitiesRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n\n}","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore {\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading = false;\n    loading = false;\n    followings: Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    userActivities: UserActivity[] = [];\n    loadingActivities = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n\n    get isCurrentUser() {\n        if (store.userStore.user && this.profile) {\n            return store.userStore.user.username === this.profile.username;\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const profile = await agent.Profiles.get(username)\n            runInAction(() => {\n                this.profile = profile;\n                this.loadingProfile = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingProfile = false);\n        }\n    }\n\n    uploadPhoto = async (file: Blob) => {\n        this.uploading = true;\n        try {\n            const response = await agent.Profiles.uploadPhoto(file);\n            const photo = response.data;\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n                this.uploading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.uploading = false);\n        }\n    }\n\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                }\n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.loading = false)\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n\n    loadUserActivities = async (username: string, predicate?: string) => {\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            })\n        } catch (error) {\n            console.log(error)\n            runInAction(() => this.loadingActivities = false);\n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore {\n    user: User | null = null\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    get isLoggedIn() {\n        return !!this.user;\n    }\n\n    login = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.login(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user)\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    logout = () => {\n        store.commonStore.setToken(null);\n        window.localStorage.removeItem('jwt');\n        this.user = null;\n        history.push('/');\n    }\n\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user)\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    }\n\n}","import { createContext, useContext } from \"react\"\nimport ActivityStore from \"./activityStore\"\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store {\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore: ModalStore;\n    profileStore: ProfileStore;\n    commentStore: CommentStore;\n}\n\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore: new ProfileStore(),\n    commentStore: new CommentStore()\n}\n\nexport const StoreContext = createContext(store);\n\nexport function useStore() {\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/ServerError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token: string | null = window.localStorage.getItem('jwt');\n    appLoaded = false;\n\n    constructor() {\n        makeAutoObservable(this);\n\n        reaction(\n            () => this.token,\n            token => {\n                if (token) {\n                    window.localStorage.setItem('jwt', token);\n                } else {\n                    window.localStorage.removeItem('jwt');\n                }\n            }\n        )\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n\n    setToken = (token: string | null) => {\n        this.token = token;\n    }\n\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n}","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal ={\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n}","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n   comments: ChatComment[] = [];\n   hubConnection: HubConnection | null = null;\n\n   constructor() {\n      makeAutoObservable(this);\n   }\n\n   createHubConnection = (activityId: string) => {\n      if (store.activityStore.selectedActivity) {\n         this.hubConnection = new HubConnectionBuilder()\n            .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n               accessTokenFactory: () => store.userStore.user?.token!\n            })\n            .withAutomaticReconnect()\n            .configureLogging(LogLevel.Information)\n            .build();\n\n         this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n         this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n            runInAction(() => {\n               comments.forEach(comment => {\n                  comment.createdAt = new Date(comment.createdAt + 'Z');\n               })\n               this.comments = comments\n            });\n         })\n\n         this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n            runInAction(() => {\n               comment.createdAt = new Date(comment.createdAt);\n               this.comments.unshift(comment)\n            });\n         })\n      }\n   }\n\n   stopHubConnection = () => {\n      this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n   }\n\n   clearComments = () => {\n      this.comments = [];\n      this.stopHubConnection();\n   }\n\n   addComment = async (values: any) => {\n      values.activityId = store.activityStore.selectedActivity?.id;\n      try {\n         await this.hubConnection?.invoke('SendComment', values);\n      } catch (error) {\n         console.log(error);\n      }\n   }\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link, NavLink } from 'react-router-dom';\nimport { Button, Container, Menu, Image, Dropdown } from 'semantic-ui-react'\nimport { useStore } from '../stores/store';\n\nexport default observer(function NavBar() {\n\n\n    const { userStore: { user, logout } } = useStore();\n    return (\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"assets/logo.png\" alt=\"logo\" style={{ marginRight: '10px' }} />\n                    Reactivities\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name='Activities' />\n                <Menu.Item as={NavLink} to='/errors' name='Errors' />\n                <Menu.Item>\n                    <Button as={NavLink} to='/createActivity' positive content='Create Activity' />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport Calendar from 'react-calendar'\nimport { Header, Menu } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store'\n\nexport default observer(function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{ widht: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Activities'\n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')} \n                />\n                <Menu.Item \n                    content=\"I'm going\"\n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}  \n                />\n                <Menu.Item \n                    content=\"I'm hosting\"\n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}  \n                />\n            </Menu>\n            <Header />\n            <Calendar \n                onChange={(date: any) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent } from 'react'\nimport { Reveal, Button } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not Following'}\n                />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer( function ProfileCard({profile}: Props){\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`} >\n            <Image src={profile.image || 'assets/user.png'}  />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>Bio goes here</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' /> \n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile} />\n        </Card>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { List, Image, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 3\n    }\n\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image\n                                size='mini' \n                                circular \n                                src={attendee.image || '/assets/user.png'}\n                                bordered\n                                style={attendee.following ? styles : null} \n                            />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n\n            ))}\n        </List>\n    )\n})","import { format } from 'date-fns';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\n\n\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment>\n                {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Canceled' style={{textAlign: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!, 'dd MMM yyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!} />\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button\n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport React, { Fragment } from 'react';\nimport { Header} from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityListItem from './ActivityListItem';\n\n\nexport default observer(function ActivityList() {\n    const { activityStore } = useStore();\n    const { groupedActivities } = activityStore;\n\n    return (\n        <>\n            {groupedActivities.map(([group, activities]) => (\n                <Fragment key={group}>\n                    <Header sub color='teal'>\n                        {group}\n\n                    </Header>\n                    {activities.map(activity => (\n                        <ActivityListItem key={activity.id} activity={activity} />\n                    ))}\n                </Fragment>\n            ))}\n        </>\n\n    )\n});","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n};","import { observer } from 'mobx-react-lite';\nimport React, { useEffect, useState } from 'react';\nimport InfiniteScroll from 'react-infinite-scroller';\nimport { Grid, Loader } from 'semantic-ui-react';\nimport { PagingParams } from '../../../app/models/pagination';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityFilters from './ActivityFilters';\nimport ActivityList from './ActivityList';\nimport ActivityListItemPlaceholder from './ActivityListItemPlaceholder';\n\n\nexport default observer(function ActivityDashboard() {\n    const { activityStore } = useStore();\n    const { loadActivities, activitiesRegistry, setPagingParams, pagination } = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext() {\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1));\n        loadActivities().then(() => setLoadingNext(false));\n    }\n\n    useEffect(() => {\n        if (activitiesRegistry.size <= 1) loadActivities();\n    }, [activitiesRegistry.size, loadActivities])\n\n    return (\n        <Grid>\n            <Grid.Column width='10'>\n                {activityStore.loadingInititial && !loadingNext ? (\n                    <>\n                        <ActivityListItemPlaceholder />\n                        <ActivityListItemPlaceholder />\n                    </>\n                ) : (\n                    <InfiniteScroll\n                        pageStart={0}\n                        loadMore={handleGetNext}\n                        hasMore={!loadingNext && !!pagination &&\n                            pagination.currentPage < pagination.totalPages}\n                        initialLoad={false}\n                    >\n                        <ActivityList />\n                    </InfiniteScroll>\n                )}\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters />\n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n});","import { useField } from 'formik';\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    type?: string;\n    label?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { ErrorMessage, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Button, Header, Label } from 'semantic-ui-react'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport { useStore } from '../../app/stores/store'\n\nexport default observer(function LoginForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error => \n                setErrors({error: 'Invalid email or password'}))}\n        >\n            {({handleSubmit, isSubmitting, errors}) => (\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Login to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage  \n                        name='error' render={() => \n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error} />}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n});","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i: any) => (\n                        <Message.Item key={i}>\n                            {err}\n                        </Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n}","import { ErrorMessage, Form, Formik } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Button, Header } from 'semantic-ui-react'\nimport MyTextInput from '../../app/common/form/MyTextInput'\nimport { useStore } from '../../app/stores/store'\nimport * as Yup from 'yup'\nimport ValidationErrors from '../errors/ValidationErrors'\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Register to Reactivities' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage  \n                        name='error' render={() => \n                        <ValidationErrors errors={errors.error} />}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting}\n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n});","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Container, Header, Image, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\nimport LoginForm from '../users/LoginForm';\nimport RegisterForm from '../users/RegisterForm';\n\nexport default observer(function HomePage() {\n    const { userStore, modalStore } = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead' >\n            <Container text>\n                <Header as='h1' inverted >\n                    <Image size='massive' src='/assets/logo.png' alt='logo' style={{ marginBottom: 12 }} />\n                    Reactivities\n                </Header>\n                {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>\n                ) : (\n                    <>\n                        <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                            Login!\n                        </Button>\n                        <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                            Register!\n                        </Button>\n                    </>\n                )}\n\n\n            </Container>\n        </Segment>\n    );\n})","import React from 'react';\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props){\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n}","import { useField } from 'formik';\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { useField } from 'formik';\nimport React from 'react'\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            \n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n]","import { useField } from 'formik';\nimport React from 'react'\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, { ReactDatePickerProps } from 'react-datepicker';\n\n\nexport default function MyDateInput(props: Partial<ReactDatePickerProps<any>>) {\n    const [field, meta, helpers] = useField(props.name!);\n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker\n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    );\n}","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport React, { useState } from 'react';\nimport { Link, useHistory, useParams } from 'react-router-dom';\nimport { Button, Header, Segment } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport { v4 as uuid } from 'uuid';\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from '../../../app/common/form/MyTextInput';\nimport MyTextArea from '../../../app/common/form/MyTextArea';\nimport MySelectInput from '../../../app/common/form/MySelectInput';\nimport { categoryOptions } from '../../../app/common/options/categoryOptions';\nimport MyDateInput from '../../../app/common/form/MyDateInput';\nimport { ActivityFormValues } from '../../../app/models/activity';\n\n\nexport default observer(function ActivityForm() {\n\n    const history = useHistory();\n    const { activityStore } = useStore();\n    const { createActivity, updateActivity, loadActivity, loadingInititial } = activityStore;\n    const { id } = useParams<{ id: string }>();\n\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n\n    const validationSchema = Yup.object({\n        title: Yup.string().required('The activity title is required'),\n        description: Yup.string().required('The activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        venue: Yup.string().required(),\n        city: Yup.string().required()\n\n    })\n\n    useEffect(() => {\n        if (id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity)))\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues) {\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            }\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n\n    }\n\n    if (loadingInititial) return <LoadingComponent content='loading activity...' />\n\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik\n                validationSchema={validationSchema}\n                enableReinitialize initialValues={activity}\n                onSubmit={values => handleFormSubmit(values)}>\n                {({ handleSubmit, isValid, isSubmitting, dirty }) => (\n                    <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                        <MyTextInput name='title' placeholder='Title' />\n                        <MyTextArea rows={3} placeholder='Description' name='description' />\n                        <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                        <MyDateInput \n                            placeholderText='Date' \n                            name='date' \n                            showTimeSelect\n                            timeCaption='time'\n                            dateFormat='MMMM d, yyyy h:mm aa'\n                        />\n                        <Header content='Locations Details' sub color='teal' />\n                        <MyTextInput placeholder='City' name='city' />\n                        <MyTextInput placeholder='Venue' name='venue' />\n                        <Button \n                            disabled={isSubmitting || !dirty || !isValid}\n                            loading={isSubmitting} \n                            floated='right' positive \n                            type='submit' \n                            content='Submit' \n                        />\n                        <Button as={Link} to='activities' floated='right' type='button' content='Cancel' />\n                    </Form>\n                )}\n            </Formik>\n        </Segment>\n    );\n});","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(comment.createdAt)} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})\n","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Item, Segment, Image, Label } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedHeader({ activity }: Props) {\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{ padding: '0' }}>\n                {activity.isCancelled &&\n                    <Label style={{ positions: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Canceled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle} />\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{ color: 'white' }}\n                                />\n                                <p>{format(activity.date!, 'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.username}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n                {activity.isHost ? (\n                    <>\n                        <Button\n                            color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link}\n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`}\n                            color='orange'\n                            floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n\n                ) : activity.isGoing ? (\n                    <Button loading={loading} onClick={updateAttendance}>Cancel attendance</Button>\n                ) : (\n                    <Button\n                        disabled={activity.isCancelled}\n                        loading={loading}\n                        onClick={updateAttendance}\n                        color='teal'>\n                        Join Activity\n                    </Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})","import { format } from 'date-fns';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport {Segment, Grid, Icon} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({activity}: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n            <span>\n              {format(activity.date!, 'dd MMM yyy h:mm aa')}\n            </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal'/>\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n})\n","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\n\ninterface Props {\n    activity: Activity;\n}\n\nexport default observer(function ActivityDetailedSidebar({ activity: { attendees, host } }: Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item style={{ position: 'relative' }} key={attendee.username}>\n                            {attendee.username === host?.username &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>}\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>}\n                            </Item.Content>\n                        </Item>\n                    ))}\n                </List>\n            </Segment>\n        </>\n\n    )\n})\n","import { observer } from 'mobx-react-lite';\nimport { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../../app/layout/LoadingComponent';\nimport { useStore } from '../../../app/stores/store';\nimport ActivityDetailedChat from './ActivityDetailedChat';\nimport ActivityDetailedHeader from './ActivityDetailedHeader';\nimport ActivityDetailedInfo from './ActivityDetailedInfo';\nimport ActivityDetailedSidebar from './ActivityDetailedSidebar';\n\nexport default observer(function ActivityDetails(){\n\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInititial, clearSelectedActivity} = activityStore;\n    const {id} = useParams<{id: string}>();\n\n    useEffect(() => {\n        if (id) loadActivity(id);\n        return () => clearSelectedActivity();\n    },[id, loadActivity, clearSelectedActivity]);\n\n    if (loadingInititial || !activity) return <LoadingComponent />;\n\n    return (\n        <Grid>\n            <Grid.Column width={10}>\n                <ActivityDetailedHeader activity={activity} />\n                <ActivityDetailedInfo activity={activity} />\n                <ActivityDetailedChat activityId={activity.id} />\n            </Grid.Column>\n            <Grid.Column width={6}>\n                <ActivityDetailedSidebar activity={activity} />\n            </Grid.Column>\n        </Grid>\n    );\n});","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err.response));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {\n                errors && <ValidationErrors errors={errors} />\n            }\n        </>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n}","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const { commonStore } = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n})\n\n","import React, { SyntheticEvent, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { UserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { useStore } from \"../../app/stores/store\";\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'future' } },\n    { menuItem: 'Past Events', pane: { key: 'past' } },\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\n];\n\nexport default observer(function ProfileActivities() {\n    const { profileStore } = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n});\n","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Card, Grid, Header, Tab } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store'\nimport ProfileCard from './ProfileCard';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header \n                        floated='left' \n                        icon='user' \n                        content={ activeTab === 3 ? `People following ${profile?.displayName}` \n                            : `People ${profile?.displayName} is following`} \n                    />\n\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n  setFiles: (files: any) => void\n}\n\nexport default function PhotoWidgetDropzone({ setFiles }: Props) {\n  const dzStyles = {\n    border: 'dashed 3px #eee',\n    borderColor: '#eee',\n    borderRadius: '5px',\n    paddingTop: '30px',\n    textAlign: 'center' as 'center',\n    height: 200\n  }\n\n  const dzActive = {\n    borderColor: 'green'\n  }\n\n  const onDrop = useCallback(acceptedFiles => {\n    setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n      preview: URL.createObjectURL(file)\n    })))\n  }, [setFiles])\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n  return (\n    <div {...getRootProps()} style={isDragActive ? { ...dzStyles, ...dzActive } : dzStyles}>\n      <input {...getInputProps()} />\n      <Icon name='upload' size='huge' />\n      <Header content='Drop image here' />\n    </div>\n  )\n}","import React from 'react'\nimport { Cropper } from 'react-cropper'\nimport 'cropperjs/dist/cropper.css'\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper\n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n}","import React, { useEffect, useState } from 'react'\nimport { Button, Grid, Header } from 'semantic-ui-react'\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone'\nimport { Cropper } from 'react-cropper'\nimport PhotoWidgetCropper from './PhtoWidgetCropper';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!))\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                    <>\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                        <Button.Group widths={2}>\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n}","import { observer } from 'mobx-react-lite'\nimport React, { SyntheticEvent, useState } from 'react'\nimport { Card, Header, Tab, Image, Grid, Button } from 'semantic-ui-react'\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget'\nimport { Photo, Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n    const { profileStore: { isCurrentUser, uploadPhoto, uploading,\n        loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotoMode, setAddPhotMode] = useState(false);\n    const [target, setTarget] = useState('')\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button\n                            floated='right'\n                            basic\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                        <Card.Group itemsPerRow={5}>\n                            {profile.photos?.map(photo => (\n                                <Card key={photo.id}>\n                                    <Image src={photo.url} />\n                                    {isCurrentUser && (\n                                        <Button.Group>\n                                            <Button\n                                                basic\n                                                color='green'\n                                                content='main'\n                                                name={'main' + photo.id}\n                                                disabled={photo.isMain}\n                                                loading={target === 'main' + photo.id && loading}\n                                                onClick={e => handleSetMainPhoto(photo, e)}\n                                            />\n                                            <Button\n                                                basic\n                                                color='red'\n                                                icon='trash'\n                                                name={photo.id}\n                                                disabled={photo.isMain}\n                                                loading={target === photo.id && loading}\n                                                onClick={e => handleDeletePhoto(photo, e)}\n                                            />\n                                        </Button.Group>\n                                    )}\n                                </Card>\n                            ))}\n                        </Card.Group>\n                    )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Tab } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile'\nimport { useStore } from '../../app/stores/store'\nimport ProfileActivities from './ProfileActivities'\nimport ProfileFollowings from './ProfileFollowings'\nimport ProfilePhotos from './ProfilePhotos'\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane>},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <ProfileActivities />},\n        {menuItem: 'Followers', render: () => <ProfileFollowings />},\n        {menuItem: 'Following', render: () => <ProfileFollowings />}\n    ]\n\n    return (\n        <Tab\n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React from 'react'\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react'\nimport { Profile } from '../../app/models/profile'\nimport FollowButton from './FollowButton'\n\ninterface Props {\n    profile: Profile\n}\n\nexport default observer (function ProfileHeader({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='followers' value={profile.followersCount} />\n                        <Statistic label='following' value={profile.followingCount} />\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile} />\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n})","import { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { useParams } from 'react-router'\nimport { Grid } from 'semantic-ui-react'\nimport LoadingComponent from '../../app/layout/LoadingComponent'\nimport { useStore } from '../../app/stores/store'\nimport ProfileContent from './ProfileContent'\nimport ProfileHeader from './ProfileHeader'\n\nexport default observer(function ProfilePage() {\n    const { username } = useParams<{ username: string }>();\n    const { profileStore } = useStore();\n    const { loadProfile, loadingProfile, profile, setActiveTab} = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => {\n            setActiveTab(0);\n        }\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>}\n\n            </Grid.Column>\n        </Grid>\n    )\n})","import React from 'react'\nimport { Redirect, Route, RouteComponentProps, RouteProps } from 'react-router';\nimport { useStore } from '../stores/store';\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from './NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router-dom';\nimport HomePage from '../../features/home/Homepage';\nimport ActivityForm from '../../features/activities/form/ActivityForm';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestErrors';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponent';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded())\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' hideProgressBar />\n      <ModalContainer />\n      <Route exact path='/' component={HomePage} />\n      <Route path={'/(.+)'}\n        render={() => (\n          <>\n            <NavBar />\n            <Container style={{ marginTop: '7em' }}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard} />\n                <PrivateRoute path='/activities/:id' component={ActivityDetails} />\n                <PrivateRoute key={location.key} path={['/createActivity', '/manage/:id']} component={ActivityForm} />\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <PrivateRoute path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound} />\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css';\nimport 'react-datepicker/dist/react-datepicker.css';\nimport './app/layout/styles.css';\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\n\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}